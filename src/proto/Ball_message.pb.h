// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Ball_message.proto

#ifndef PROTOBUF_Ball_5fmessage_2eproto__INCLUDED
#define PROTOBUF_Ball_5fmessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "position_message.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Ball_5fmessage_2eproto();
void protobuf_AssignDesc_Ball_5fmessage_2eproto();
void protobuf_ShutdownFile_Ball_5fmessage_2eproto();

class Ball_message;

// ===================================================================

class Ball_message : public ::google::protobuf::Message {
 public:
  Ball_message();
  virtual ~Ball_message();

  Ball_message(const Ball_message& from);

  inline Ball_message& operator=(const Ball_message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ball_message& default_instance();

  void Swap(Ball_message* other);

  // implements Message ----------------------------------------------

  Ball_message* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Ball_message& from);
  void MergeFrom(const Ball_message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool isValid = 1;
  inline bool has_isvalid() const;
  inline void clear_isvalid();
  static const int kIsValidFieldNumber = 1;
  inline bool isvalid() const;
  inline void set_isvalid(bool value);

  // required .position_message position = 2;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 2;
  inline const ::position_message& position() const;
  inline ::position_message* mutable_position();
  inline ::position_message* release_position();
  inline void set_allocated_position(::position_message* position);

  // required .position_message velocity = 3;
  inline bool has_velocity() const;
  inline void clear_velocity();
  static const int kVelocityFieldNumber = 3;
  inline const ::position_message& velocity() const;
  inline ::position_message* mutable_velocity();
  inline ::position_message* release_velocity();
  inline void set_allocated_velocity(::position_message* velocity);

  // @@protoc_insertion_point(class_scope:Ball_message)
 private:
  inline void set_has_isvalid();
  inline void clear_has_isvalid();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_velocity();
  inline void clear_has_velocity();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::position_message* position_;
  ::position_message* velocity_;
  bool isvalid_;
  friend void  protobuf_AddDesc_Ball_5fmessage_2eproto();
  friend void protobuf_AssignDesc_Ball_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_Ball_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static Ball_message* default_instance_;
};
// ===================================================================


// ===================================================================

// Ball_message

// required bool isValid = 1;
inline bool Ball_message::has_isvalid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ball_message::set_has_isvalid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ball_message::clear_has_isvalid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ball_message::clear_isvalid() {
  isvalid_ = false;
  clear_has_isvalid();
}
inline bool Ball_message::isvalid() const {
  // @@protoc_insertion_point(field_get:Ball_message.isValid)
  return isvalid_;
}
inline void Ball_message::set_isvalid(bool value) {
  set_has_isvalid();
  isvalid_ = value;
  // @@protoc_insertion_point(field_set:Ball_message.isValid)
}

// required .position_message position = 2;
inline bool Ball_message::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ball_message::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ball_message::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Ball_message::clear_position() {
  if (position_ != NULL) position_->::position_message::Clear();
  clear_has_position();
}
inline const ::position_message& Ball_message::position() const {
  // @@protoc_insertion_point(field_get:Ball_message.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::position_message* Ball_message::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::position_message;
  // @@protoc_insertion_point(field_mutable:Ball_message.position)
  return position_;
}
inline ::position_message* Ball_message::release_position() {
  clear_has_position();
  ::position_message* temp = position_;
  position_ = NULL;
  return temp;
}
inline void Ball_message::set_allocated_position(::position_message* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:Ball_message.position)
}

// required .position_message velocity = 3;
inline bool Ball_message::has_velocity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ball_message::set_has_velocity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Ball_message::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Ball_message::clear_velocity() {
  if (velocity_ != NULL) velocity_->::position_message::Clear();
  clear_has_velocity();
}
inline const ::position_message& Ball_message::velocity() const {
  // @@protoc_insertion_point(field_get:Ball_message.velocity)
  return velocity_ != NULL ? *velocity_ : *default_instance_->velocity_;
}
inline ::position_message* Ball_message::mutable_velocity() {
  set_has_velocity();
  if (velocity_ == NULL) velocity_ = new ::position_message;
  // @@protoc_insertion_point(field_mutable:Ball_message.velocity)
  return velocity_;
}
inline ::position_message* Ball_message::release_velocity() {
  clear_has_velocity();
  ::position_message* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
inline void Ball_message::set_allocated_velocity(::position_message* velocity) {
  delete velocity_;
  velocity_ = velocity;
  if (velocity) {
    set_has_velocity();
  } else {
    clear_has_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:Ball_message.velocity)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Ball_5fmessage_2eproto__INCLUDED

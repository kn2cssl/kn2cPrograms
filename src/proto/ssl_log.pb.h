// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_log.proto

#ifndef PROTOBUF_ssl_5flog_2eproto__INCLUDED
#define PROTOBUF_ssl_5flog_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Robot_message.pb.h"
#include "Ball_message.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ssl_5flog_2eproto();
void protobuf_AssignDesc_ssl_5flog_2eproto();
void protobuf_ShutdownFile_ssl_5flog_2eproto();

class log_chunk;
class SSL_log;

// ===================================================================

class log_chunk : public ::google::protobuf::Message {
 public:
  log_chunk();
  virtual ~log_chunk();

  log_chunk(const log_chunk& from);

  inline log_chunk& operator=(const log_chunk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const log_chunk& default_instance();

  void Swap(log_chunk* other);

  // implements Message ----------------------------------------------

  log_chunk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const log_chunk& from);
  void MergeFrom(const log_chunk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 chunk_number = 1;
  inline bool has_chunk_number() const;
  inline void clear_chunk_number();
  static const int kChunkNumberFieldNumber = 1;
  inline ::google::protobuf::int64 chunk_number() const;
  inline void set_chunk_number(::google::protobuf::int64 value);

  // required .Ball_message ball = 2;
  inline bool has_ball() const;
  inline void clear_ball();
  static const int kBallFieldNumber = 2;
  inline const ::Ball_message& ball() const;
  inline ::Ball_message* mutable_ball();
  inline ::Ball_message* release_ball();
  inline void set_allocated_ball(::Ball_message* ball);

  // repeated .Robot_message ours = 3;
  inline int ours_size() const;
  inline void clear_ours();
  static const int kOursFieldNumber = 3;
  inline const ::Robot_message& ours(int index) const;
  inline ::Robot_message* mutable_ours(int index);
  inline ::Robot_message* add_ours();
  inline const ::google::protobuf::RepeatedPtrField< ::Robot_message >&
      ours() const;
  inline ::google::protobuf::RepeatedPtrField< ::Robot_message >*
      mutable_ours();

  // repeated .Robot_message opps = 4;
  inline int opps_size() const;
  inline void clear_opps();
  static const int kOppsFieldNumber = 4;
  inline const ::Robot_message& opps(int index) const;
  inline ::Robot_message* mutable_opps(int index);
  inline ::Robot_message* add_opps();
  inline const ::google::protobuf::RepeatedPtrField< ::Robot_message >&
      opps() const;
  inline ::google::protobuf::RepeatedPtrField< ::Robot_message >*
      mutable_opps();

  // @@protoc_insertion_point(class_scope:log_chunk)
 private:
  inline void set_has_chunk_number();
  inline void clear_has_chunk_number();
  inline void set_has_ball();
  inline void clear_has_ball();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 chunk_number_;
  ::Ball_message* ball_;
  ::google::protobuf::RepeatedPtrField< ::Robot_message > ours_;
  ::google::protobuf::RepeatedPtrField< ::Robot_message > opps_;
  friend void  protobuf_AddDesc_ssl_5flog_2eproto();
  friend void protobuf_AssignDesc_ssl_5flog_2eproto();
  friend void protobuf_ShutdownFile_ssl_5flog_2eproto();

  void InitAsDefaultInstance();
  static log_chunk* default_instance_;
};
// -------------------------------------------------------------------

class SSL_log : public ::google::protobuf::Message {
 public:
  SSL_log();
  virtual ~SSL_log();

  SSL_log(const SSL_log& from);

  inline SSL_log& operator=(const SSL_log& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SSL_log& default_instance();

  void Swap(SSL_log* other);

  // implements Message ----------------------------------------------

  SSL_log* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SSL_log& from);
  void MergeFrom(const SSL_log& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 numberOfChunks = 1;
  inline bool has_numberofchunks() const;
  inline void clear_numberofchunks();
  static const int kNumberOfChunksFieldNumber = 1;
  inline ::google::protobuf::int64 numberofchunks() const;
  inline void set_numberofchunks(::google::protobuf::int64 value);

  // required int64 timerInterval = 2;
  inline bool has_timerinterval() const;
  inline void clear_timerinterval();
  static const int kTimerIntervalFieldNumber = 2;
  inline ::google::protobuf::int64 timerinterval() const;
  inline void set_timerinterval(::google::protobuf::int64 value);

  // repeated .log_chunk chunks = 3;
  inline int chunks_size() const;
  inline void clear_chunks();
  static const int kChunksFieldNumber = 3;
  inline const ::log_chunk& chunks(int index) const;
  inline ::log_chunk* mutable_chunks(int index);
  inline ::log_chunk* add_chunks();
  inline const ::google::protobuf::RepeatedPtrField< ::log_chunk >&
      chunks() const;
  inline ::google::protobuf::RepeatedPtrField< ::log_chunk >*
      mutable_chunks();

  // @@protoc_insertion_point(class_scope:SSL_log)
 private:
  inline void set_has_numberofchunks();
  inline void clear_has_numberofchunks();
  inline void set_has_timerinterval();
  inline void clear_has_timerinterval();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 numberofchunks_;
  ::google::protobuf::int64 timerinterval_;
  ::google::protobuf::RepeatedPtrField< ::log_chunk > chunks_;
  friend void  protobuf_AddDesc_ssl_5flog_2eproto();
  friend void protobuf_AssignDesc_ssl_5flog_2eproto();
  friend void protobuf_ShutdownFile_ssl_5flog_2eproto();

  void InitAsDefaultInstance();
  static SSL_log* default_instance_;
};
// ===================================================================


// ===================================================================

// log_chunk

// required int64 chunk_number = 1;
inline bool log_chunk::has_chunk_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void log_chunk::set_has_chunk_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void log_chunk::clear_has_chunk_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void log_chunk::clear_chunk_number() {
  chunk_number_ = GOOGLE_LONGLONG(0);
  clear_has_chunk_number();
}
inline ::google::protobuf::int64 log_chunk::chunk_number() const {
  // @@protoc_insertion_point(field_get:log_chunk.chunk_number)
  return chunk_number_;
}
inline void log_chunk::set_chunk_number(::google::protobuf::int64 value) {
  set_has_chunk_number();
  chunk_number_ = value;
  // @@protoc_insertion_point(field_set:log_chunk.chunk_number)
}

// required .Ball_message ball = 2;
inline bool log_chunk::has_ball() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void log_chunk::set_has_ball() {
  _has_bits_[0] |= 0x00000002u;
}
inline void log_chunk::clear_has_ball() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void log_chunk::clear_ball() {
  if (ball_ != NULL) ball_->::Ball_message::Clear();
  clear_has_ball();
}
inline const ::Ball_message& log_chunk::ball() const {
  // @@protoc_insertion_point(field_get:log_chunk.ball)
  return ball_ != NULL ? *ball_ : *default_instance_->ball_;
}
inline ::Ball_message* log_chunk::mutable_ball() {
  set_has_ball();
  if (ball_ == NULL) ball_ = new ::Ball_message;
  // @@protoc_insertion_point(field_mutable:log_chunk.ball)
  return ball_;
}
inline ::Ball_message* log_chunk::release_ball() {
  clear_has_ball();
  ::Ball_message* temp = ball_;
  ball_ = NULL;
  return temp;
}
inline void log_chunk::set_allocated_ball(::Ball_message* ball) {
  delete ball_;
  ball_ = ball;
  if (ball) {
    set_has_ball();
  } else {
    clear_has_ball();
  }
  // @@protoc_insertion_point(field_set_allocated:log_chunk.ball)
}

// repeated .Robot_message ours = 3;
inline int log_chunk::ours_size() const {
  return ours_.size();
}
inline void log_chunk::clear_ours() {
  ours_.Clear();
}
inline const ::Robot_message& log_chunk::ours(int index) const {
  // @@protoc_insertion_point(field_get:log_chunk.ours)
  return ours_.Get(index);
}
inline ::Robot_message* log_chunk::mutable_ours(int index) {
  // @@protoc_insertion_point(field_mutable:log_chunk.ours)
  return ours_.Mutable(index);
}
inline ::Robot_message* log_chunk::add_ours() {
  // @@protoc_insertion_point(field_add:log_chunk.ours)
  return ours_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Robot_message >&
log_chunk::ours() const {
  // @@protoc_insertion_point(field_list:log_chunk.ours)
  return ours_;
}
inline ::google::protobuf::RepeatedPtrField< ::Robot_message >*
log_chunk::mutable_ours() {
  // @@protoc_insertion_point(field_mutable_list:log_chunk.ours)
  return &ours_;
}

// repeated .Robot_message opps = 4;
inline int log_chunk::opps_size() const {
  return opps_.size();
}
inline void log_chunk::clear_opps() {
  opps_.Clear();
}
inline const ::Robot_message& log_chunk::opps(int index) const {
  // @@protoc_insertion_point(field_get:log_chunk.opps)
  return opps_.Get(index);
}
inline ::Robot_message* log_chunk::mutable_opps(int index) {
  // @@protoc_insertion_point(field_mutable:log_chunk.opps)
  return opps_.Mutable(index);
}
inline ::Robot_message* log_chunk::add_opps() {
  // @@protoc_insertion_point(field_add:log_chunk.opps)
  return opps_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Robot_message >&
log_chunk::opps() const {
  // @@protoc_insertion_point(field_list:log_chunk.opps)
  return opps_;
}
inline ::google::protobuf::RepeatedPtrField< ::Robot_message >*
log_chunk::mutable_opps() {
  // @@protoc_insertion_point(field_mutable_list:log_chunk.opps)
  return &opps_;
}

// -------------------------------------------------------------------

// SSL_log

// required int64 numberOfChunks = 1;
inline bool SSL_log::has_numberofchunks() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SSL_log::set_has_numberofchunks() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SSL_log::clear_has_numberofchunks() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SSL_log::clear_numberofchunks() {
  numberofchunks_ = GOOGLE_LONGLONG(0);
  clear_has_numberofchunks();
}
inline ::google::protobuf::int64 SSL_log::numberofchunks() const {
  // @@protoc_insertion_point(field_get:SSL_log.numberOfChunks)
  return numberofchunks_;
}
inline void SSL_log::set_numberofchunks(::google::protobuf::int64 value) {
  set_has_numberofchunks();
  numberofchunks_ = value;
  // @@protoc_insertion_point(field_set:SSL_log.numberOfChunks)
}

// required int64 timerInterval = 2;
inline bool SSL_log::has_timerinterval() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SSL_log::set_has_timerinterval() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SSL_log::clear_has_timerinterval() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SSL_log::clear_timerinterval() {
  timerinterval_ = GOOGLE_LONGLONG(0);
  clear_has_timerinterval();
}
inline ::google::protobuf::int64 SSL_log::timerinterval() const {
  // @@protoc_insertion_point(field_get:SSL_log.timerInterval)
  return timerinterval_;
}
inline void SSL_log::set_timerinterval(::google::protobuf::int64 value) {
  set_has_timerinterval();
  timerinterval_ = value;
  // @@protoc_insertion_point(field_set:SSL_log.timerInterval)
}

// repeated .log_chunk chunks = 3;
inline int SSL_log::chunks_size() const {
  return chunks_.size();
}
inline void SSL_log::clear_chunks() {
  chunks_.Clear();
}
inline const ::log_chunk& SSL_log::chunks(int index) const {
  // @@protoc_insertion_point(field_get:SSL_log.chunks)
  return chunks_.Get(index);
}
inline ::log_chunk* SSL_log::mutable_chunks(int index) {
  // @@protoc_insertion_point(field_mutable:SSL_log.chunks)
  return chunks_.Mutable(index);
}
inline ::log_chunk* SSL_log::add_chunks() {
  // @@protoc_insertion_point(field_add:SSL_log.chunks)
  return chunks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::log_chunk >&
SSL_log::chunks() const {
  // @@protoc_insertion_point(field_list:SSL_log.chunks)
  return chunks_;
}
inline ::google::protobuf::RepeatedPtrField< ::log_chunk >*
SSL_log::mutable_chunks() {
  // @@protoc_insertion_point(field_mutable_list:SSL_log.chunks)
  return &chunks_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ssl_5flog_2eproto__INCLUDED

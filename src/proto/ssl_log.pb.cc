// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_log.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ssl_log.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* log_chunk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  log_chunk_reflection_ = NULL;
const ::google::protobuf::Descriptor* SSL_log_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SSL_log_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ssl_5flog_2eproto() {
  protobuf_AddDesc_ssl_5flog_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ssl_log.proto");
  GOOGLE_CHECK(file != NULL);
  log_chunk_descriptor_ = file->message_type(0);
  static const int log_chunk_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_chunk, chunk_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_chunk, ball_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_chunk, ours_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_chunk, opps_),
  };
  log_chunk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      log_chunk_descriptor_,
      log_chunk::default_instance_,
      log_chunk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_chunk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_chunk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(log_chunk));
  SSL_log_descriptor_ = file->message_type(1);
  static const int SSL_log_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_log, numberofchunks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_log, timerinterval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_log, chunks_),
  };
  SSL_log_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SSL_log_descriptor_,
      SSL_log::default_instance_,
      SSL_log_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_log, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_log, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SSL_log));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ssl_5flog_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    log_chunk_descriptor_, &log_chunk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SSL_log_descriptor_, &SSL_log::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ssl_5flog_2eproto() {
  delete log_chunk::default_instance_;
  delete log_chunk_reflection_;
  delete SSL_log::default_instance_;
  delete SSL_log_reflection_;
}

void protobuf_AddDesc_ssl_5flog_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_Robot_5fmessage_2eproto();
  ::protobuf_AddDesc_Ball_5fmessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rssl_log.proto\032\023Robot_message.proto\032\022Ba"
    "ll_message.proto\"z\n\tlog_chunk\022\024\n\014chunk_n"
    "umber\030\001 \002(\003\022\033\n\004ball\030\002 \002(\0132\r.Ball_message"
    "\022\034\n\004ours\030\003 \003(\0132\016.Robot_message\022\034\n\004opps\030\004"
    " \003(\0132\016.Robot_message\"T\n\007SSL_log\022\026\n\016numbe"
    "rOfChunks\030\001 \002(\003\022\025\n\rtimerInterval\030\002 \002(\003\022\032"
    "\n\006chunks\030\003 \003(\0132\n.log_chunk", 266);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ssl_log.proto", &protobuf_RegisterTypes);
  log_chunk::default_instance_ = new log_chunk();
  SSL_log::default_instance_ = new SSL_log();
  log_chunk::default_instance_->InitAsDefaultInstance();
  SSL_log::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ssl_5flog_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ssl_5flog_2eproto {
  StaticDescriptorInitializer_ssl_5flog_2eproto() {
    protobuf_AddDesc_ssl_5flog_2eproto();
  }
} static_descriptor_initializer_ssl_5flog_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int log_chunk::kChunkNumberFieldNumber;
const int log_chunk::kBallFieldNumber;
const int log_chunk::kOursFieldNumber;
const int log_chunk::kOppsFieldNumber;
#endif  // !_MSC_VER

log_chunk::log_chunk()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:log_chunk)
}

void log_chunk::InitAsDefaultInstance() {
  ball_ = const_cast< ::Ball_message*>(&::Ball_message::default_instance());
}

log_chunk::log_chunk(const log_chunk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:log_chunk)
}

void log_chunk::SharedCtor() {
  _cached_size_ = 0;
  chunk_number_ = GOOGLE_LONGLONG(0);
  ball_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

log_chunk::~log_chunk() {
  // @@protoc_insertion_point(destructor:log_chunk)
  SharedDtor();
}

void log_chunk::SharedDtor() {
  if (this != default_instance_) {
    delete ball_;
  }
}

void log_chunk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* log_chunk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return log_chunk_descriptor_;
}

const log_chunk& log_chunk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssl_5flog_2eproto();
  return *default_instance_;
}

log_chunk* log_chunk::default_instance_ = NULL;

log_chunk* log_chunk::New() const {
  return new log_chunk;
}

void log_chunk::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    chunk_number_ = GOOGLE_LONGLONG(0);
    if (has_ball()) {
      if (ball_ != NULL) ball_->::Ball_message::Clear();
    }
  }
  ours_.Clear();
  opps_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool log_chunk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:log_chunk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 chunk_number = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chunk_number_)));
          set_has_chunk_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ball;
        break;
      }

      // required .Ball_message ball = 2;
      case 2: {
        if (tag == 18) {
         parse_ball:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ball()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ours;
        break;
      }

      // repeated .Robot_message ours = 3;
      case 3: {
        if (tag == 26) {
         parse_ours:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ours()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ours;
        if (input->ExpectTag(34)) goto parse_opps;
        break;
      }

      // repeated .Robot_message opps = 4;
      case 4: {
        if (tag == 34) {
         parse_opps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_opps()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_opps;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:log_chunk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:log_chunk)
  return false;
#undef DO_
}

void log_chunk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:log_chunk)
  // required int64 chunk_number = 1;
  if (has_chunk_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->chunk_number(), output);
  }

  // required .Ball_message ball = 2;
  if (has_ball()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ball(), output);
  }

  // repeated .Robot_message ours = 3;
  for (int i = 0; i < this->ours_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ours(i), output);
  }

  // repeated .Robot_message opps = 4;
  for (int i = 0; i < this->opps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->opps(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:log_chunk)
}

::google::protobuf::uint8* log_chunk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:log_chunk)
  // required int64 chunk_number = 1;
  if (has_chunk_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->chunk_number(), target);
  }

  // required .Ball_message ball = 2;
  if (has_ball()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ball(), target);
  }

  // repeated .Robot_message ours = 3;
  for (int i = 0; i < this->ours_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ours(i), target);
  }

  // repeated .Robot_message opps = 4;
  for (int i = 0; i < this->opps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->opps(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:log_chunk)
  return target;
}

int log_chunk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 chunk_number = 1;
    if (has_chunk_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chunk_number());
    }

    // required .Ball_message ball = 2;
    if (has_ball()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ball());
    }

  }
  // repeated .Robot_message ours = 3;
  total_size += 1 * this->ours_size();
  for (int i = 0; i < this->ours_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ours(i));
  }

  // repeated .Robot_message opps = 4;
  total_size += 1 * this->opps_size();
  for (int i = 0; i < this->opps_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->opps(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void log_chunk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const log_chunk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const log_chunk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void log_chunk::MergeFrom(const log_chunk& from) {
  GOOGLE_CHECK_NE(&from, this);
  ours_.MergeFrom(from.ours_);
  opps_.MergeFrom(from.opps_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chunk_number()) {
      set_chunk_number(from.chunk_number());
    }
    if (from.has_ball()) {
      mutable_ball()->::Ball_message::MergeFrom(from.ball());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void log_chunk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void log_chunk::CopyFrom(const log_chunk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool log_chunk::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_ball()) {
    if (!this->ball().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->ours())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->opps())) return false;
  return true;
}

void log_chunk::Swap(log_chunk* other) {
  if (other != this) {
    std::swap(chunk_number_, other->chunk_number_);
    std::swap(ball_, other->ball_);
    ours_.Swap(&other->ours_);
    opps_.Swap(&other->opps_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata log_chunk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = log_chunk_descriptor_;
  metadata.reflection = log_chunk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SSL_log::kNumberOfChunksFieldNumber;
const int SSL_log::kTimerIntervalFieldNumber;
const int SSL_log::kChunksFieldNumber;
#endif  // !_MSC_VER

SSL_log::SSL_log()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSL_log)
}

void SSL_log::InitAsDefaultInstance() {
}

SSL_log::SSL_log(const SSL_log& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SSL_log)
}

void SSL_log::SharedCtor() {
  _cached_size_ = 0;
  numberofchunks_ = GOOGLE_LONGLONG(0);
  timerinterval_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SSL_log::~SSL_log() {
  // @@protoc_insertion_point(destructor:SSL_log)
  SharedDtor();
}

void SSL_log::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SSL_log::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSL_log::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SSL_log_descriptor_;
}

const SSL_log& SSL_log::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssl_5flog_2eproto();
  return *default_instance_;
}

SSL_log* SSL_log::default_instance_ = NULL;

SSL_log* SSL_log::New() const {
  return new SSL_log;
}

void SSL_log::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SSL_log*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(numberofchunks_, timerinterval_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  chunks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SSL_log::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSL_log)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 numberOfChunks = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &numberofchunks_)));
          set_has_numberofchunks();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_timerInterval;
        break;
      }

      // required int64 timerInterval = 2;
      case 2: {
        if (tag == 16) {
         parse_timerInterval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timerinterval_)));
          set_has_timerinterval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_chunks;
        break;
      }

      // repeated .log_chunk chunks = 3;
      case 3: {
        if (tag == 26) {
         parse_chunks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chunks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_chunks;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSL_log)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSL_log)
  return false;
#undef DO_
}

void SSL_log::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSL_log)
  // required int64 numberOfChunks = 1;
  if (has_numberofchunks()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->numberofchunks(), output);
  }

  // required int64 timerInterval = 2;
  if (has_timerinterval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timerinterval(), output);
  }

  // repeated .log_chunk chunks = 3;
  for (int i = 0; i < this->chunks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->chunks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSL_log)
}

::google::protobuf::uint8* SSL_log::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSL_log)
  // required int64 numberOfChunks = 1;
  if (has_numberofchunks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->numberofchunks(), target);
  }

  // required int64 timerInterval = 2;
  if (has_timerinterval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timerinterval(), target);
  }

  // repeated .log_chunk chunks = 3;
  for (int i = 0; i < this->chunks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->chunks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSL_log)
  return target;
}

int SSL_log::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 numberOfChunks = 1;
    if (has_numberofchunks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->numberofchunks());
    }

    // required int64 timerInterval = 2;
    if (has_timerinterval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timerinterval());
    }

  }
  // repeated .log_chunk chunks = 3;
  total_size += 1 * this->chunks_size();
  for (int i = 0; i < this->chunks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chunks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSL_log::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SSL_log* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SSL_log*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SSL_log::MergeFrom(const SSL_log& from) {
  GOOGLE_CHECK_NE(&from, this);
  chunks_.MergeFrom(from.chunks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_numberofchunks()) {
      set_numberofchunks(from.numberofchunks());
    }
    if (from.has_timerinterval()) {
      set_timerinterval(from.timerinterval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SSL_log::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSL_log::CopyFrom(const SSL_log& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_log::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->chunks())) return false;
  return true;
}

void SSL_log::Swap(SSL_log* other) {
  if (other != this) {
    std::swap(numberofchunks_, other->numberofchunks_);
    std::swap(timerinterval_, other->timerinterval_);
    chunks_.Swap(&other->chunks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SSL_log::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SSL_log_descriptor_;
  metadata.reflection = SSL_log_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

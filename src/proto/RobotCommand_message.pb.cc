// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RobotCommand_message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RobotCommand_message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class RobotCommand_messageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RobotCommand_message> {};
RobotCommand_messageDefaultTypeInternal _RobotCommand_message_default_instance_;

namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace


const ::google::protobuf::uint32* protobuf_Offsets_RobotCommand_5fmessage_2eproto() GOOGLE_ATTRIBUTE_COLD;
const ::google::protobuf::uint32* protobuf_Offsets_RobotCommand_5fmessage_2eproto() {
  static const ::google::protobuf::uint32 offsets[] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotCommand_message, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotCommand_message, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotCommand_message, fin_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotCommand_message, fin_vel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotCommand_message, maxspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotCommand_message, kickspeedx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotCommand_message, kickspeedz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotCommand_message, usenav_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotCommand_message, isballobs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotCommand_message, iskickobs_),
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
  };
  return offsets;
}

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 12, sizeof(RobotCommand_message)},
};

static const ::google::protobuf::internal::DefaultInstanceData file_default_instances[] = {
  {reinterpret_cast<const ::google::protobuf::Message*>(&_RobotCommand_message_default_instance_), NULL},
};

namespace {

void protobuf_AssignDescriptors() {
  protobuf_AddDesc_RobotCommand_5fmessage_2eproto();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "RobotCommand_message.proto", schemas, file_default_instances, protobuf_Offsets_RobotCommand_5fmessage_2eproto(), factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void protobuf_ShutdownFile_RobotCommand_5fmessage_2eproto() {
  _RobotCommand_message_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void protobuf_InitDefaults_RobotCommand_5fmessage_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_InitDefaults_position_5fmessage_2eproto();
  ::google::protobuf::internal::InitProtobufDefaults();
  _RobotCommand_message_default_instance_.DefaultConstruct();
  _RobotCommand_message_default_instance_.get_mutable()->fin_pos_ = const_cast< ::position_message*>(
      ::position_message::internal_default_instance());
  _RobotCommand_message_default_instance_.get_mutable()->fin_vel_ = const_cast< ::position_message*>(
      ::position_message::internal_default_instance());
}

void protobuf_InitDefaults_RobotCommand_5fmessage_2eproto() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_InitDefaults_RobotCommand_5fmessage_2eproto_impl);
}
void protobuf_AddDesc_RobotCommand_5fmessage_2eproto_impl() {
  protobuf_InitDefaults_RobotCommand_5fmessage_2eproto();
  static const char descriptor[] = {
      "\n\032RobotCommand_message.proto\032\026position_m"
      "essage.proto\"\316\001\n\024RobotCommand_message\022\"\n"
      "\007fin_pos\030\001 \002(\0132\021.position_message\022\"\n\007fin"
      "_vel\030\002 \002(\0132\021.position_message\022\020\n\010maxSpee"
      "d\030\003 \002(\002\022\022\n\nkickspeedx\030\004 \002(\002\022\022\n\nkickspeed"
      "z\030\005 \002(\002\022\016\n\006useNav\030\006 \002(\010\022\021\n\tisBallObs\030\007 \002"
      "(\010\022\021\n\tisKickObs\030\010 \002(\010"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 261);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RobotCommand_message.proto", &protobuf_RegisterTypes);
  ::protobuf_AddDesc_position_5fmessage_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RobotCommand_5fmessage_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_RobotCommand_5fmessage_2eproto_once_);
void protobuf_AddDesc_RobotCommand_5fmessage_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_RobotCommand_5fmessage_2eproto_once_,
                 &protobuf_AddDesc_RobotCommand_5fmessage_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RobotCommand_5fmessage_2eproto {
  StaticDescriptorInitializer_RobotCommand_5fmessage_2eproto() {
    protobuf_AddDesc_RobotCommand_5fmessage_2eproto();
  }
} static_descriptor_initializer_RobotCommand_5fmessage_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RobotCommand_message::kFinPosFieldNumber;
const int RobotCommand_message::kFinVelFieldNumber;
const int RobotCommand_message::kMaxSpeedFieldNumber;
const int RobotCommand_message::kKickspeedxFieldNumber;
const int RobotCommand_message::kKickspeedzFieldNumber;
const int RobotCommand_message::kUseNavFieldNumber;
const int RobotCommand_message::kIsBallObsFieldNumber;
const int RobotCommand_message::kIsKickObsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RobotCommand_message::RobotCommand_message()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_RobotCommand_5fmessage_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:RobotCommand_message)
}
RobotCommand_message::RobotCommand_message(const RobotCommand_message& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_fin_pos()) {
    fin_pos_ = new ::position_message(*from.fin_pos_);
  } else {
    fin_pos_ = NULL;
  }
  if (from.has_fin_vel()) {
    fin_vel_ = new ::position_message(*from.fin_vel_);
  } else {
    fin_vel_ = NULL;
  }
  ::memcpy(&maxspeed_, &from.maxspeed_,
    reinterpret_cast<char*>(&iskickobs_) -
    reinterpret_cast<char*>(&maxspeed_) + sizeof(iskickobs_));
  // @@protoc_insertion_point(copy_constructor:RobotCommand_message)
}

void RobotCommand_message::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&fin_pos_, 0, reinterpret_cast<char*>(&iskickobs_) -
    reinterpret_cast<char*>(&fin_pos_) + sizeof(iskickobs_));
}

RobotCommand_message::~RobotCommand_message() {
  // @@protoc_insertion_point(destructor:RobotCommand_message)
  SharedDtor();
}

void RobotCommand_message::SharedDtor() {
  if (this != internal_default_instance()) {
    delete fin_pos_;
  }
  if (this != internal_default_instance()) {
    delete fin_vel_;
  }
}

void RobotCommand_message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RobotCommand_message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[0].descriptor;
}

const RobotCommand_message& RobotCommand_message::default_instance() {
  protobuf_InitDefaults_RobotCommand_5fmessage_2eproto();
  return *internal_default_instance();
}

RobotCommand_message* RobotCommand_message::New(::google::protobuf::Arena* arena) const {
  RobotCommand_message* n = new RobotCommand_message;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RobotCommand_message::Clear() {
// @@protoc_insertion_point(message_clear_start:RobotCommand_message)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_fin_pos()) {
      GOOGLE_DCHECK(fin_pos_ != NULL);
      fin_pos_->::position_message::Clear();
    }
    if (has_fin_vel()) {
      GOOGLE_DCHECK(fin_vel_ != NULL);
      fin_vel_->::position_message::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&maxspeed_, 0, reinterpret_cast<char*>(&iskickobs_) -
      reinterpret_cast<char*>(&maxspeed_) + sizeof(iskickobs_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RobotCommand_message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RobotCommand_message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .position_message fin_pos = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fin_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .position_message fin_vel = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fin_vel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float maxSpeed = 3;
      case 3: {
        if (tag == 29u) {
          set_has_maxspeed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxspeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float kickspeedx = 4;
      case 4: {
        if (tag == 37u) {
          set_has_kickspeedx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &kickspeedx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float kickspeedz = 5;
      case 5: {
        if (tag == 45u) {
          set_has_kickspeedz();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &kickspeedz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool useNav = 6;
      case 6: {
        if (tag == 48u) {
          set_has_usenav();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &usenav_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool isBallObs = 7;
      case 7: {
        if (tag == 56u) {
          set_has_isballobs();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isballobs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool isKickObs = 8;
      case 8: {
        if (tag == 64u) {
          set_has_iskickobs();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iskickobs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RobotCommand_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RobotCommand_message)
  return false;
#undef DO_
}

void RobotCommand_message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RobotCommand_message)
  // required .position_message fin_pos = 1;
  if (has_fin_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->fin_pos_, output);
  }

  // required .position_message fin_vel = 2;
  if (has_fin_vel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->fin_vel_, output);
  }

  // required float maxSpeed = 3;
  if (has_maxspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->maxspeed(), output);
  }

  // required float kickspeedx = 4;
  if (has_kickspeedx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->kickspeedx(), output);
  }

  // required float kickspeedz = 5;
  if (has_kickspeedz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->kickspeedz(), output);
  }

  // required bool useNav = 6;
  if (has_usenav()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->usenav(), output);
  }

  // required bool isBallObs = 7;
  if (has_isballobs()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->isballobs(), output);
  }

  // required bool isKickObs = 8;
  if (has_iskickobs()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->iskickobs(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RobotCommand_message)
}

::google::protobuf::uint8* RobotCommand_message::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:RobotCommand_message)
  // required .position_message fin_pos = 1;
  if (has_fin_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->fin_pos_, false, target);
  }

  // required .position_message fin_vel = 2;
  if (has_fin_vel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->fin_vel_, false, target);
  }

  // required float maxSpeed = 3;
  if (has_maxspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->maxspeed(), target);
  }

  // required float kickspeedx = 4;
  if (has_kickspeedx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->kickspeedx(), target);
  }

  // required float kickspeedz = 5;
  if (has_kickspeedz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->kickspeedz(), target);
  }

  // required bool useNav = 6;
  if (has_usenav()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->usenav(), target);
  }

  // required bool isBallObs = 7;
  if (has_isballobs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->isballobs(), target);
  }

  // required bool isKickObs = 8;
  if (has_iskickobs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->iskickobs(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RobotCommand_message)
  return target;
}

size_t RobotCommand_message::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RobotCommand_message)
  size_t total_size = 0;

  if (has_fin_pos()) {
    // required .position_message fin_pos = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->fin_pos_);
  }

  if (has_fin_vel()) {
    // required .position_message fin_vel = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->fin_vel_);
  }

  if (has_maxspeed()) {
    // required float maxSpeed = 3;
    total_size += 1 + 4;
  }

  if (has_kickspeedx()) {
    // required float kickspeedx = 4;
    total_size += 1 + 4;
  }

  if (has_kickspeedz()) {
    // required float kickspeedz = 5;
    total_size += 1 + 4;
  }

  if (has_usenav()) {
    // required bool useNav = 6;
    total_size += 1 + 1;
  }

  if (has_isballobs()) {
    // required bool isBallObs = 7;
    total_size += 1 + 1;
  }

  if (has_iskickobs()) {
    // required bool isKickObs = 8;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t RobotCommand_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RobotCommand_message)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required .position_message fin_pos = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->fin_pos_);

    // required .position_message fin_vel = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->fin_vel_);

    // required float maxSpeed = 3;
    total_size += 1 + 4;

    // required float kickspeedx = 4;
    total_size += 1 + 4;

    // required float kickspeedz = 5;
    total_size += 1 + 4;

    // required bool useNav = 6;
    total_size += 1 + 1;

    // required bool isBallObs = 7;
    total_size += 1 + 1;

    // required bool isKickObs = 8;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RobotCommand_message::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RobotCommand_message)
  GOOGLE_DCHECK_NE(&from, this);
  const RobotCommand_message* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RobotCommand_message>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RobotCommand_message)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RobotCommand_message)
    MergeFrom(*source);
  }
}

void RobotCommand_message::MergeFrom(const RobotCommand_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RobotCommand_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_fin_pos()) {
      mutable_fin_pos()->::position_message::MergeFrom(from.fin_pos());
    }
    if (from.has_fin_vel()) {
      mutable_fin_vel()->::position_message::MergeFrom(from.fin_vel());
    }
    if (from.has_maxspeed()) {
      set_maxspeed(from.maxspeed());
    }
    if (from.has_kickspeedx()) {
      set_kickspeedx(from.kickspeedx());
    }
    if (from.has_kickspeedz()) {
      set_kickspeedz(from.kickspeedz());
    }
    if (from.has_usenav()) {
      set_usenav(from.usenav());
    }
    if (from.has_isballobs()) {
      set_isballobs(from.isballobs());
    }
    if (from.has_iskickobs()) {
      set_iskickobs(from.iskickobs());
    }
  }
}

void RobotCommand_message::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RobotCommand_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotCommand_message::CopyFrom(const RobotCommand_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RobotCommand_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotCommand_message::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  if (has_fin_pos()) {
    if (!this->fin_pos_->IsInitialized()) return false;
  }
  if (has_fin_vel()) {
    if (!this->fin_vel_->IsInitialized()) return false;
  }
  return true;
}

void RobotCommand_message::Swap(RobotCommand_message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RobotCommand_message::InternalSwap(RobotCommand_message* other) {
  std::swap(fin_pos_, other->fin_pos_);
  std::swap(fin_vel_, other->fin_vel_);
  std::swap(maxspeed_, other->maxspeed_);
  std::swap(kickspeedx_, other->kickspeedx_);
  std::swap(kickspeedz_, other->kickspeedz_);
  std::swap(usenav_, other->usenav_);
  std::swap(isballobs_, other->isballobs_);
  std::swap(iskickobs_, other->iskickobs_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RobotCommand_message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RobotCommand_message

// required .position_message fin_pos = 1;
bool RobotCommand_message::has_fin_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RobotCommand_message::set_has_fin_pos() {
  _has_bits_[0] |= 0x00000001u;
}
void RobotCommand_message::clear_has_fin_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
void RobotCommand_message::clear_fin_pos() {
  if (fin_pos_ != NULL) fin_pos_->::position_message::Clear();
  clear_has_fin_pos();
}
const ::position_message& RobotCommand_message::fin_pos() const {
  // @@protoc_insertion_point(field_get:RobotCommand_message.fin_pos)
  return fin_pos_ != NULL ? *fin_pos_
                         : *::position_message::internal_default_instance();
}
::position_message* RobotCommand_message::mutable_fin_pos() {
  set_has_fin_pos();
  if (fin_pos_ == NULL) {
    fin_pos_ = new ::position_message;
  }
  // @@protoc_insertion_point(field_mutable:RobotCommand_message.fin_pos)
  return fin_pos_;
}
::position_message* RobotCommand_message::release_fin_pos() {
  // @@protoc_insertion_point(field_release:RobotCommand_message.fin_pos)
  clear_has_fin_pos();
  ::position_message* temp = fin_pos_;
  fin_pos_ = NULL;
  return temp;
}
void RobotCommand_message::set_allocated_fin_pos(::position_message* fin_pos) {
  delete fin_pos_;
  fin_pos_ = fin_pos;
  if (fin_pos) {
    set_has_fin_pos();
  } else {
    clear_has_fin_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:RobotCommand_message.fin_pos)
}

// required .position_message fin_vel = 2;
bool RobotCommand_message::has_fin_vel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RobotCommand_message::set_has_fin_vel() {
  _has_bits_[0] |= 0x00000002u;
}
void RobotCommand_message::clear_has_fin_vel() {
  _has_bits_[0] &= ~0x00000002u;
}
void RobotCommand_message::clear_fin_vel() {
  if (fin_vel_ != NULL) fin_vel_->::position_message::Clear();
  clear_has_fin_vel();
}
const ::position_message& RobotCommand_message::fin_vel() const {
  // @@protoc_insertion_point(field_get:RobotCommand_message.fin_vel)
  return fin_vel_ != NULL ? *fin_vel_
                         : *::position_message::internal_default_instance();
}
::position_message* RobotCommand_message::mutable_fin_vel() {
  set_has_fin_vel();
  if (fin_vel_ == NULL) {
    fin_vel_ = new ::position_message;
  }
  // @@protoc_insertion_point(field_mutable:RobotCommand_message.fin_vel)
  return fin_vel_;
}
::position_message* RobotCommand_message::release_fin_vel() {
  // @@protoc_insertion_point(field_release:RobotCommand_message.fin_vel)
  clear_has_fin_vel();
  ::position_message* temp = fin_vel_;
  fin_vel_ = NULL;
  return temp;
}
void RobotCommand_message::set_allocated_fin_vel(::position_message* fin_vel) {
  delete fin_vel_;
  fin_vel_ = fin_vel;
  if (fin_vel) {
    set_has_fin_vel();
  } else {
    clear_has_fin_vel();
  }
  // @@protoc_insertion_point(field_set_allocated:RobotCommand_message.fin_vel)
}

// required float maxSpeed = 3;
bool RobotCommand_message::has_maxspeed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RobotCommand_message::set_has_maxspeed() {
  _has_bits_[0] |= 0x00000004u;
}
void RobotCommand_message::clear_has_maxspeed() {
  _has_bits_[0] &= ~0x00000004u;
}
void RobotCommand_message::clear_maxspeed() {
  maxspeed_ = 0;
  clear_has_maxspeed();
}
float RobotCommand_message::maxspeed() const {
  // @@protoc_insertion_point(field_get:RobotCommand_message.maxSpeed)
  return maxspeed_;
}
void RobotCommand_message::set_maxspeed(float value) {
  set_has_maxspeed();
  maxspeed_ = value;
  // @@protoc_insertion_point(field_set:RobotCommand_message.maxSpeed)
}

// required float kickspeedx = 4;
bool RobotCommand_message::has_kickspeedx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RobotCommand_message::set_has_kickspeedx() {
  _has_bits_[0] |= 0x00000008u;
}
void RobotCommand_message::clear_has_kickspeedx() {
  _has_bits_[0] &= ~0x00000008u;
}
void RobotCommand_message::clear_kickspeedx() {
  kickspeedx_ = 0;
  clear_has_kickspeedx();
}
float RobotCommand_message::kickspeedx() const {
  // @@protoc_insertion_point(field_get:RobotCommand_message.kickspeedx)
  return kickspeedx_;
}
void RobotCommand_message::set_kickspeedx(float value) {
  set_has_kickspeedx();
  kickspeedx_ = value;
  // @@protoc_insertion_point(field_set:RobotCommand_message.kickspeedx)
}

// required float kickspeedz = 5;
bool RobotCommand_message::has_kickspeedz() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RobotCommand_message::set_has_kickspeedz() {
  _has_bits_[0] |= 0x00000010u;
}
void RobotCommand_message::clear_has_kickspeedz() {
  _has_bits_[0] &= ~0x00000010u;
}
void RobotCommand_message::clear_kickspeedz() {
  kickspeedz_ = 0;
  clear_has_kickspeedz();
}
float RobotCommand_message::kickspeedz() const {
  // @@protoc_insertion_point(field_get:RobotCommand_message.kickspeedz)
  return kickspeedz_;
}
void RobotCommand_message::set_kickspeedz(float value) {
  set_has_kickspeedz();
  kickspeedz_ = value;
  // @@protoc_insertion_point(field_set:RobotCommand_message.kickspeedz)
}

// required bool useNav = 6;
bool RobotCommand_message::has_usenav() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RobotCommand_message::set_has_usenav() {
  _has_bits_[0] |= 0x00000020u;
}
void RobotCommand_message::clear_has_usenav() {
  _has_bits_[0] &= ~0x00000020u;
}
void RobotCommand_message::clear_usenav() {
  usenav_ = false;
  clear_has_usenav();
}
bool RobotCommand_message::usenav() const {
  // @@protoc_insertion_point(field_get:RobotCommand_message.useNav)
  return usenav_;
}
void RobotCommand_message::set_usenav(bool value) {
  set_has_usenav();
  usenav_ = value;
  // @@protoc_insertion_point(field_set:RobotCommand_message.useNav)
}

// required bool isBallObs = 7;
bool RobotCommand_message::has_isballobs() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void RobotCommand_message::set_has_isballobs() {
  _has_bits_[0] |= 0x00000040u;
}
void RobotCommand_message::clear_has_isballobs() {
  _has_bits_[0] &= ~0x00000040u;
}
void RobotCommand_message::clear_isballobs() {
  isballobs_ = false;
  clear_has_isballobs();
}
bool RobotCommand_message::isballobs() const {
  // @@protoc_insertion_point(field_get:RobotCommand_message.isBallObs)
  return isballobs_;
}
void RobotCommand_message::set_isballobs(bool value) {
  set_has_isballobs();
  isballobs_ = value;
  // @@protoc_insertion_point(field_set:RobotCommand_message.isBallObs)
}

// required bool isKickObs = 8;
bool RobotCommand_message::has_iskickobs() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void RobotCommand_message::set_has_iskickobs() {
  _has_bits_[0] |= 0x00000080u;
}
void RobotCommand_message::clear_has_iskickobs() {
  _has_bits_[0] &= ~0x00000080u;
}
void RobotCommand_message::clear_iskickobs() {
  iskickobs_ = false;
  clear_has_iskickobs();
}
bool RobotCommand_message::iskickobs() const {
  // @@protoc_insertion_point(field_get:RobotCommand_message.isKickObs)
  return iskickobs_;
}
void RobotCommand_message::set_iskickobs(bool value) {
  set_has_iskickobs();
  iskickobs_ = value;
  // @@protoc_insertion_point(field_set:RobotCommand_message.isKickObs)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

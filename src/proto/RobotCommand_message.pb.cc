// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RobotCommand_message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RobotCommand_message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* RobotCommand_message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RobotCommand_message_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_RobotCommand_5fmessage_2eproto() {
  protobuf_AddDesc_RobotCommand_5fmessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RobotCommand_message.proto");
  GOOGLE_CHECK(file != NULL);
  RobotCommand_message_descriptor_ = file->message_type(0);
  static const int RobotCommand_message_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotCommand_message, fin_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotCommand_message, fin_vel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotCommand_message, maxspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotCommand_message, kickspeedx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotCommand_message, kickspeedz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotCommand_message, usenav_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotCommand_message, isballobs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotCommand_message, iskickobs_),
  };
  RobotCommand_message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RobotCommand_message_descriptor_,
      RobotCommand_message::default_instance_,
      RobotCommand_message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotCommand_message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotCommand_message, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RobotCommand_message));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RobotCommand_5fmessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RobotCommand_message_descriptor_, &RobotCommand_message::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RobotCommand_5fmessage_2eproto() {
  delete RobotCommand_message::default_instance_;
  delete RobotCommand_message_reflection_;
}

void protobuf_AddDesc_RobotCommand_5fmessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_position_5fmessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032RobotCommand_message.proto\032\026position_m"
    "essage.proto\"\316\001\n\024RobotCommand_message\022\"\n"
    "\007fin_pos\030\001 \002(\0132\021.position_message\022\"\n\007fin"
    "_vel\030\002 \002(\0132\021.position_message\022\020\n\010maxSpee"
    "d\030\003 \002(\002\022\022\n\nkickspeedx\030\004 \002(\002\022\022\n\nkickspeed"
    "z\030\005 \002(\002\022\016\n\006useNav\030\006 \002(\010\022\021\n\tisBallObs\030\007 \002"
    "(\010\022\021\n\tisKickObs\030\010 \002(\010", 261);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RobotCommand_message.proto", &protobuf_RegisterTypes);
  RobotCommand_message::default_instance_ = new RobotCommand_message();
  RobotCommand_message::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RobotCommand_5fmessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RobotCommand_5fmessage_2eproto {
  StaticDescriptorInitializer_RobotCommand_5fmessage_2eproto() {
    protobuf_AddDesc_RobotCommand_5fmessage_2eproto();
  }
} static_descriptor_initializer_RobotCommand_5fmessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RobotCommand_message::kFinPosFieldNumber;
const int RobotCommand_message::kFinVelFieldNumber;
const int RobotCommand_message::kMaxSpeedFieldNumber;
const int RobotCommand_message::kKickspeedxFieldNumber;
const int RobotCommand_message::kKickspeedzFieldNumber;
const int RobotCommand_message::kUseNavFieldNumber;
const int RobotCommand_message::kIsBallObsFieldNumber;
const int RobotCommand_message::kIsKickObsFieldNumber;
#endif  // !_MSC_VER

RobotCommand_message::RobotCommand_message()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RobotCommand_message)
}

void RobotCommand_message::InitAsDefaultInstance() {
  fin_pos_ = const_cast< ::position_message*>(&::position_message::default_instance());
  fin_vel_ = const_cast< ::position_message*>(&::position_message::default_instance());
}

RobotCommand_message::RobotCommand_message(const RobotCommand_message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RobotCommand_message)
}

void RobotCommand_message::SharedCtor() {
  _cached_size_ = 0;
  fin_pos_ = NULL;
  fin_vel_ = NULL;
  maxspeed_ = 0;
  kickspeedx_ = 0;
  kickspeedz_ = 0;
  usenav_ = false;
  isballobs_ = false;
  iskickobs_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RobotCommand_message::~RobotCommand_message() {
  // @@protoc_insertion_point(destructor:RobotCommand_message)
  SharedDtor();
}

void RobotCommand_message::SharedDtor() {
  if (this != default_instance_) {
    delete fin_pos_;
    delete fin_vel_;
  }
}

void RobotCommand_message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RobotCommand_message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RobotCommand_message_descriptor_;
}

const RobotCommand_message& RobotCommand_message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RobotCommand_5fmessage_2eproto();
  return *default_instance_;
}

RobotCommand_message* RobotCommand_message::default_instance_ = NULL;

RobotCommand_message* RobotCommand_message::New() const {
  return new RobotCommand_message;
}

void RobotCommand_message::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RobotCommand_message*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(maxspeed_, iskickobs_);
    if (has_fin_pos()) {
      if (fin_pos_ != NULL) fin_pos_->::position_message::Clear();
    }
    if (has_fin_vel()) {
      if (fin_vel_ != NULL) fin_vel_->::position_message::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RobotCommand_message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RobotCommand_message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .position_message fin_pos = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fin_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fin_vel;
        break;
      }

      // required .position_message fin_vel = 2;
      case 2: {
        if (tag == 18) {
         parse_fin_vel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fin_vel()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_maxSpeed;
        break;
      }

      // required float maxSpeed = 3;
      case 3: {
        if (tag == 29) {
         parse_maxSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxspeed_)));
          set_has_maxspeed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_kickspeedx;
        break;
      }

      // required float kickspeedx = 4;
      case 4: {
        if (tag == 37) {
         parse_kickspeedx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &kickspeedx_)));
          set_has_kickspeedx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_kickspeedz;
        break;
      }

      // required float kickspeedz = 5;
      case 5: {
        if (tag == 45) {
         parse_kickspeedz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &kickspeedz_)));
          set_has_kickspeedz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_useNav;
        break;
      }

      // required bool useNav = 6;
      case 6: {
        if (tag == 48) {
         parse_useNav:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &usenav_)));
          set_has_usenav();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_isBallObs;
        break;
      }

      // required bool isBallObs = 7;
      case 7: {
        if (tag == 56) {
         parse_isBallObs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isballobs_)));
          set_has_isballobs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_isKickObs;
        break;
      }

      // required bool isKickObs = 8;
      case 8: {
        if (tag == 64) {
         parse_isKickObs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iskickobs_)));
          set_has_iskickobs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RobotCommand_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RobotCommand_message)
  return false;
#undef DO_
}

void RobotCommand_message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RobotCommand_message)
  // required .position_message fin_pos = 1;
  if (has_fin_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fin_pos(), output);
  }

  // required .position_message fin_vel = 2;
  if (has_fin_vel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fin_vel(), output);
  }

  // required float maxSpeed = 3;
  if (has_maxspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->maxspeed(), output);
  }

  // required float kickspeedx = 4;
  if (has_kickspeedx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->kickspeedx(), output);
  }

  // required float kickspeedz = 5;
  if (has_kickspeedz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->kickspeedz(), output);
  }

  // required bool useNav = 6;
  if (has_usenav()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->usenav(), output);
  }

  // required bool isBallObs = 7;
  if (has_isballobs()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->isballobs(), output);
  }

  // required bool isKickObs = 8;
  if (has_iskickobs()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->iskickobs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RobotCommand_message)
}

::google::protobuf::uint8* RobotCommand_message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RobotCommand_message)
  // required .position_message fin_pos = 1;
  if (has_fin_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fin_pos(), target);
  }

  // required .position_message fin_vel = 2;
  if (has_fin_vel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fin_vel(), target);
  }

  // required float maxSpeed = 3;
  if (has_maxspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->maxspeed(), target);
  }

  // required float kickspeedx = 4;
  if (has_kickspeedx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->kickspeedx(), target);
  }

  // required float kickspeedz = 5;
  if (has_kickspeedz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->kickspeedz(), target);
  }

  // required bool useNav = 6;
  if (has_usenav()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->usenav(), target);
  }

  // required bool isBallObs = 7;
  if (has_isballobs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->isballobs(), target);
  }

  // required bool isKickObs = 8;
  if (has_iskickobs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->iskickobs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RobotCommand_message)
  return target;
}

int RobotCommand_message::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .position_message fin_pos = 1;
    if (has_fin_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fin_pos());
    }

    // required .position_message fin_vel = 2;
    if (has_fin_vel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fin_vel());
    }

    // required float maxSpeed = 3;
    if (has_maxspeed()) {
      total_size += 1 + 4;
    }

    // required float kickspeedx = 4;
    if (has_kickspeedx()) {
      total_size += 1 + 4;
    }

    // required float kickspeedz = 5;
    if (has_kickspeedz()) {
      total_size += 1 + 4;
    }

    // required bool useNav = 6;
    if (has_usenav()) {
      total_size += 1 + 1;
    }

    // required bool isBallObs = 7;
    if (has_isballobs()) {
      total_size += 1 + 1;
    }

    // required bool isKickObs = 8;
    if (has_iskickobs()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RobotCommand_message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RobotCommand_message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RobotCommand_message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RobotCommand_message::MergeFrom(const RobotCommand_message& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fin_pos()) {
      mutable_fin_pos()->::position_message::MergeFrom(from.fin_pos());
    }
    if (from.has_fin_vel()) {
      mutable_fin_vel()->::position_message::MergeFrom(from.fin_vel());
    }
    if (from.has_maxspeed()) {
      set_maxspeed(from.maxspeed());
    }
    if (from.has_kickspeedx()) {
      set_kickspeedx(from.kickspeedx());
    }
    if (from.has_kickspeedz()) {
      set_kickspeedz(from.kickspeedz());
    }
    if (from.has_usenav()) {
      set_usenav(from.usenav());
    }
    if (from.has_isballobs()) {
      set_isballobs(from.isballobs());
    }
    if (from.has_iskickobs()) {
      set_iskickobs(from.iskickobs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RobotCommand_message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotCommand_message::CopyFrom(const RobotCommand_message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotCommand_message::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  if (has_fin_pos()) {
    if (!this->fin_pos().IsInitialized()) return false;
  }
  if (has_fin_vel()) {
    if (!this->fin_vel().IsInitialized()) return false;
  }
  return true;
}

void RobotCommand_message::Swap(RobotCommand_message* other) {
  if (other != this) {
    std::swap(fin_pos_, other->fin_pos_);
    std::swap(fin_vel_, other->fin_vel_);
    std::swap(maxspeed_, other->maxspeed_);
    std::swap(kickspeedx_, other->kickspeedx_);
    std::swap(kickspeedz_, other->kickspeedz_);
    std::swap(usenav_, other->usenav_);
    std::swap(isballobs_, other->isballobs_);
    std::swap(iskickobs_, other->iskickobs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RobotCommand_message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RobotCommand_message_descriptor_;
  metadata.reflection = RobotCommand_message_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

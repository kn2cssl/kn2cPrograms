// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: log.proto

#ifndef PROTOBUF_log_2eproto__INCLUDED
#define PROTOBUF_log_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "vision_log.pb.h"
#include "ssl_log.pb.h"
#include "ref_log.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_log_2eproto();
void protobuf_AssignDesc_log_2eproto();
void protobuf_ShutdownFile_log_2eproto();

class logRecord;

// ===================================================================

class logRecord : public ::google::protobuf::Message {
 public:
  logRecord();
  virtual ~logRecord();

  logRecord(const logRecord& from);

  inline logRecord& operator=(const logRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const logRecord& default_instance();

  void Swap(logRecord* other);

  // implements Message ----------------------------------------------

  logRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const logRecord& from);
  void MergeFrom(const logRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SSL_log ai = 1;
  inline bool has_ai() const;
  inline void clear_ai();
  static const int kAiFieldNumber = 1;
  inline const ::SSL_log& ai() const;
  inline ::SSL_log* mutable_ai();
  inline ::SSL_log* release_ai();
  inline void set_allocated_ai(::SSL_log* ai);

  // optional .Vision_log vision = 2;
  inline bool has_vision() const;
  inline void clear_vision();
  static const int kVisionFieldNumber = 2;
  inline const ::Vision_log& vision() const;
  inline ::Vision_log* mutable_vision();
  inline ::Vision_log* release_vision();
  inline void set_allocated_vision(::Vision_log* vision);

  // optional .Ref_log referee = 3;
  inline bool has_referee() const;
  inline void clear_referee();
  static const int kRefereeFieldNumber = 3;
  inline const ::Ref_log& referee() const;
  inline ::Ref_log* mutable_referee();
  inline ::Ref_log* release_referee();
  inline void set_allocated_referee(::Ref_log* referee);

  // @@protoc_insertion_point(class_scope:logRecord)
 private:
  inline void set_has_ai();
  inline void clear_has_ai();
  inline void set_has_vision();
  inline void clear_has_vision();
  inline void set_has_referee();
  inline void clear_has_referee();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::SSL_log* ai_;
  ::Vision_log* vision_;
  ::Ref_log* referee_;
  friend void  protobuf_AddDesc_log_2eproto();
  friend void protobuf_AssignDesc_log_2eproto();
  friend void protobuf_ShutdownFile_log_2eproto();

  void InitAsDefaultInstance();
  static logRecord* default_instance_;
};
// ===================================================================


// ===================================================================

// logRecord

// optional .SSL_log ai = 1;
inline bool logRecord::has_ai() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void logRecord::set_has_ai() {
  _has_bits_[0] |= 0x00000001u;
}
inline void logRecord::clear_has_ai() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void logRecord::clear_ai() {
  if (ai_ != NULL) ai_->::SSL_log::Clear();
  clear_has_ai();
}
inline const ::SSL_log& logRecord::ai() const {
  // @@protoc_insertion_point(field_get:logRecord.ai)
  return ai_ != NULL ? *ai_ : *default_instance_->ai_;
}
inline ::SSL_log* logRecord::mutable_ai() {
  set_has_ai();
  if (ai_ == NULL) ai_ = new ::SSL_log;
  // @@protoc_insertion_point(field_mutable:logRecord.ai)
  return ai_;
}
inline ::SSL_log* logRecord::release_ai() {
  clear_has_ai();
  ::SSL_log* temp = ai_;
  ai_ = NULL;
  return temp;
}
inline void logRecord::set_allocated_ai(::SSL_log* ai) {
  delete ai_;
  ai_ = ai;
  if (ai) {
    set_has_ai();
  } else {
    clear_has_ai();
  }
  // @@protoc_insertion_point(field_set_allocated:logRecord.ai)
}

// optional .Vision_log vision = 2;
inline bool logRecord::has_vision() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void logRecord::set_has_vision() {
  _has_bits_[0] |= 0x00000002u;
}
inline void logRecord::clear_has_vision() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void logRecord::clear_vision() {
  if (vision_ != NULL) vision_->::Vision_log::Clear();
  clear_has_vision();
}
inline const ::Vision_log& logRecord::vision() const {
  // @@protoc_insertion_point(field_get:logRecord.vision)
  return vision_ != NULL ? *vision_ : *default_instance_->vision_;
}
inline ::Vision_log* logRecord::mutable_vision() {
  set_has_vision();
  if (vision_ == NULL) vision_ = new ::Vision_log;
  // @@protoc_insertion_point(field_mutable:logRecord.vision)
  return vision_;
}
inline ::Vision_log* logRecord::release_vision() {
  clear_has_vision();
  ::Vision_log* temp = vision_;
  vision_ = NULL;
  return temp;
}
inline void logRecord::set_allocated_vision(::Vision_log* vision) {
  delete vision_;
  vision_ = vision;
  if (vision) {
    set_has_vision();
  } else {
    clear_has_vision();
  }
  // @@protoc_insertion_point(field_set_allocated:logRecord.vision)
}

// optional .Ref_log referee = 3;
inline bool logRecord::has_referee() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void logRecord::set_has_referee() {
  _has_bits_[0] |= 0x00000004u;
}
inline void logRecord::clear_has_referee() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void logRecord::clear_referee() {
  if (referee_ != NULL) referee_->::Ref_log::Clear();
  clear_has_referee();
}
inline const ::Ref_log& logRecord::referee() const {
  // @@protoc_insertion_point(field_get:logRecord.referee)
  return referee_ != NULL ? *referee_ : *default_instance_->referee_;
}
inline ::Ref_log* logRecord::mutable_referee() {
  set_has_referee();
  if (referee_ == NULL) referee_ = new ::Ref_log;
  // @@protoc_insertion_point(field_mutable:logRecord.referee)
  return referee_;
}
inline ::Ref_log* logRecord::release_referee() {
  clear_has_referee();
  ::Ref_log* temp = referee_;
  referee_ = NULL;
  return temp;
}
inline void logRecord::set_allocated_referee(::Ref_log* referee) {
  delete referee_;
  referee_ = referee;
  if (referee) {
    set_has_referee();
  } else {
    clear_has_referee();
  }
  // @@protoc_insertion_point(field_set_allocated:logRecord.referee)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_log_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vision_log.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "vision_log.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Vision_chunk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vision_chunk_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vision_log_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vision_log_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_vision_5flog_2eproto() {
  protobuf_AddDesc_vision_5flog_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "vision_log.proto");
  GOOGLE_CHECK(file != NULL);
  Vision_chunk_descriptor_ = file->message_type(0);
  static const int Vision_chunk_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_chunk, time_elapsed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_chunk, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_chunk, packet_),
  };
  Vision_chunk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vision_chunk_descriptor_,
      Vision_chunk::default_instance_,
      Vision_chunk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_chunk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_chunk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vision_chunk));
  Vision_log_descriptor_ = file->message_type(1);
  static const int Vision_log_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_log, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_log, chunks_),
  };
  Vision_log_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vision_log_descriptor_,
      Vision_log::default_instance_,
      Vision_log_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_log, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vision_log, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vision_log));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_vision_5flog_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vision_chunk_descriptor_, &Vision_chunk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vision_log_descriptor_, &Vision_log::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_vision_5flog_2eproto() {
  delete Vision_chunk::default_instance_;
  delete Vision_chunk_reflection_;
  delete Vision_log::default_instance_;
  delete Vision_log_reflection_;
}

void protobuf_AddDesc_vision_5flog_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_messages_5frobocup_5fssl_5fwrapper_2eproto();
  ::RoboCup2014Legacy::Wrapper::protobuf_AddDesc_messages_5frobocup_5fssl_5fwrapper_5flegacy_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020vision_log.proto\032\"messages_robocup_ssl"
    "_wrapper.proto\032)messages_robocup_ssl_wra"
    "pper_legacy.proto\"T\n\014Vision_chunk\022\024\n\014tim"
    "e_elapsed\030\001 \002(\003\022\n\n\002id\030\002 \001(\003\022\"\n\006packet\030\003 "
    "\002(\0132\022.SSL_WrapperPacket\";\n\nVision_log\022\016\n"
    "\006number\030\001 \001(\003\022\035\n\006chunks\030\002 \003(\0132\r.Vision_c"
    "hunk", 244);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "vision_log.proto", &protobuf_RegisterTypes);
  Vision_chunk::default_instance_ = new Vision_chunk();
  Vision_log::default_instance_ = new Vision_log();
  Vision_chunk::default_instance_->InitAsDefaultInstance();
  Vision_log::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_vision_5flog_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_vision_5flog_2eproto {
  StaticDescriptorInitializer_vision_5flog_2eproto() {
    protobuf_AddDesc_vision_5flog_2eproto();
  }
} static_descriptor_initializer_vision_5flog_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Vision_chunk::kTimeElapsedFieldNumber;
const int Vision_chunk::kIdFieldNumber;
const int Vision_chunk::kPacketFieldNumber;
#endif  // !_MSC_VER

Vision_chunk::Vision_chunk()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Vision_chunk)
}

void Vision_chunk::InitAsDefaultInstance() {
  packet_ = const_cast< ::SSL_WrapperPacket*>(&::SSL_WrapperPacket::default_instance());
}

Vision_chunk::Vision_chunk(const Vision_chunk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Vision_chunk)
}

void Vision_chunk::SharedCtor() {
  _cached_size_ = 0;
  time_elapsed_ = GOOGLE_LONGLONG(0);
  id_ = GOOGLE_LONGLONG(0);
  packet_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vision_chunk::~Vision_chunk() {
  // @@protoc_insertion_point(destructor:Vision_chunk)
  SharedDtor();
}

void Vision_chunk::SharedDtor() {
  if (this != default_instance_) {
    delete packet_;
  }
}

void Vision_chunk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vision_chunk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vision_chunk_descriptor_;
}

const Vision_chunk& Vision_chunk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vision_5flog_2eproto();
  return *default_instance_;
}

Vision_chunk* Vision_chunk::default_instance_ = NULL;

Vision_chunk* Vision_chunk::New() const {
  return new Vision_chunk;
}

void Vision_chunk::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Vision_chunk*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(time_elapsed_, id_);
    if (has_packet()) {
      if (packet_ != NULL) packet_->::SSL_WrapperPacket::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vision_chunk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Vision_chunk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 time_elapsed = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_elapsed_)));
          set_has_time_elapsed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int64 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_packet;
        break;
      }

      // required .SSL_WrapperPacket packet = 3;
      case 3: {
        if (tag == 26) {
         parse_packet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_packet()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Vision_chunk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Vision_chunk)
  return false;
#undef DO_
}

void Vision_chunk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Vision_chunk)
  // required int64 time_elapsed = 1;
  if (has_time_elapsed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time_elapsed(), output);
  }

  // optional int64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }

  // required .SSL_WrapperPacket packet = 3;
  if (has_packet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->packet(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Vision_chunk)
}

::google::protobuf::uint8* Vision_chunk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Vision_chunk)
  // required int64 time_elapsed = 1;
  if (has_time_elapsed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time_elapsed(), target);
  }

  // optional int64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }

  // required .SSL_WrapperPacket packet = 3;
  if (has_packet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->packet(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Vision_chunk)
  return target;
}

int Vision_chunk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 time_elapsed = 1;
    if (has_time_elapsed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time_elapsed());
    }

    // optional int64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // required .SSL_WrapperPacket packet = 3;
    if (has_packet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->packet());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vision_chunk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vision_chunk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vision_chunk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vision_chunk::MergeFrom(const Vision_chunk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_elapsed()) {
      set_time_elapsed(from.time_elapsed());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_packet()) {
      mutable_packet()->::SSL_WrapperPacket::MergeFrom(from.packet());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vision_chunk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vision_chunk::CopyFrom(const Vision_chunk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vision_chunk::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (has_packet()) {
    if (!this->packet().IsInitialized()) return false;
  }
  return true;
}

void Vision_chunk::Swap(Vision_chunk* other) {
  if (other != this) {
    std::swap(time_elapsed_, other->time_elapsed_);
    std::swap(id_, other->id_);
    std::swap(packet_, other->packet_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vision_chunk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vision_chunk_descriptor_;
  metadata.reflection = Vision_chunk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Vision_log::kNumberFieldNumber;
const int Vision_log::kChunksFieldNumber;
#endif  // !_MSC_VER

Vision_log::Vision_log()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Vision_log)
}

void Vision_log::InitAsDefaultInstance() {
}

Vision_log::Vision_log(const Vision_log& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Vision_log)
}

void Vision_log::SharedCtor() {
  _cached_size_ = 0;
  number_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vision_log::~Vision_log() {
  // @@protoc_insertion_point(destructor:Vision_log)
  SharedDtor();
}

void Vision_log::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vision_log::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vision_log::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vision_log_descriptor_;
}

const Vision_log& Vision_log::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vision_5flog_2eproto();
  return *default_instance_;
}

Vision_log* Vision_log::default_instance_ = NULL;

Vision_log* Vision_log::New() const {
  return new Vision_log;
}

void Vision_log::Clear() {
  number_ = GOOGLE_LONGLONG(0);
  chunks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vision_log::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Vision_log)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 number = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_chunks;
        break;
      }

      // repeated .Vision_chunk chunks = 2;
      case 2: {
        if (tag == 18) {
         parse_chunks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chunks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_chunks;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Vision_log)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Vision_log)
  return false;
#undef DO_
}

void Vision_log::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Vision_log)
  // optional int64 number = 1;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->number(), output);
  }

  // repeated .Vision_chunk chunks = 2;
  for (int i = 0; i < this->chunks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->chunks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Vision_log)
}

::google::protobuf::uint8* Vision_log::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Vision_log)
  // optional int64 number = 1;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->number(), target);
  }

  // repeated .Vision_chunk chunks = 2;
  for (int i = 0; i < this->chunks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->chunks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Vision_log)
  return target;
}

int Vision_log::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 number = 1;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->number());
    }

  }
  // repeated .Vision_chunk chunks = 2;
  total_size += 1 * this->chunks_size();
  for (int i = 0; i < this->chunks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chunks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vision_log::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vision_log* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vision_log*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vision_log::MergeFrom(const Vision_log& from) {
  GOOGLE_CHECK_NE(&from, this);
  chunks_.MergeFrom(from.chunks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_number()) {
      set_number(from.number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vision_log::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vision_log::CopyFrom(const Vision_log& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vision_log::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->chunks())) return false;
  return true;
}

void Vision_log::Swap(Vision_log* other) {
  if (other != this) {
    std::swap(number_, other->number_);
    chunks_.Swap(&other->chunks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vision_log::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vision_log_descriptor_;
  metadata.reflection = Vision_log_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Ball_message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Ball_message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class Ball_messageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Ball_message> {};
Ball_messageDefaultTypeInternal _Ball_message_default_instance_;

namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace


const ::google::protobuf::uint32* protobuf_Offsets_Ball_5fmessage_2eproto() GOOGLE_ATTRIBUTE_COLD;
const ::google::protobuf::uint32* protobuf_Offsets_Ball_5fmessage_2eproto() {
  static const ::google::protobuf::uint32 offsets[] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ball_message, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ball_message, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ball_message, isvalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ball_message, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ball_message, velocity_),
    2,
    0,
    1,
  };
  return offsets;
}

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(Ball_message)},
};

static const ::google::protobuf::internal::DefaultInstanceData file_default_instances[] = {
  {reinterpret_cast<const ::google::protobuf::Message*>(&_Ball_message_default_instance_), NULL},
};

namespace {

void protobuf_AssignDescriptors() {
  protobuf_AddDesc_Ball_5fmessage_2eproto();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "Ball_message.proto", schemas, file_default_instances, protobuf_Offsets_Ball_5fmessage_2eproto(), factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void protobuf_ShutdownFile_Ball_5fmessage_2eproto() {
  _Ball_message_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void protobuf_InitDefaults_Ball_5fmessage_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_InitDefaults_position_5fmessage_2eproto();
  ::google::protobuf::internal::InitProtobufDefaults();
  _Ball_message_default_instance_.DefaultConstruct();
  _Ball_message_default_instance_.get_mutable()->position_ = const_cast< ::position_message*>(
      ::position_message::internal_default_instance());
  _Ball_message_default_instance_.get_mutable()->velocity_ = const_cast< ::position_message*>(
      ::position_message::internal_default_instance());
}

void protobuf_InitDefaults_Ball_5fmessage_2eproto() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_InitDefaults_Ball_5fmessage_2eproto_impl);
}
void protobuf_AddDesc_Ball_5fmessage_2eproto_impl() {
  protobuf_InitDefaults_Ball_5fmessage_2eproto();
  static const char descriptor[] = {
      "\n\022Ball_message.proto\032\026position_message.p"
      "roto\"i\n\014Ball_message\022\017\n\007isValid\030\001 \002(\010\022#\n"
      "\010position\030\002 \002(\0132\021.position_message\022#\n\010ve"
      "locity\030\003 \002(\0132\021.position_message"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 151);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Ball_message.proto", &protobuf_RegisterTypes);
  ::protobuf_AddDesc_position_5fmessage_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Ball_5fmessage_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_Ball_5fmessage_2eproto_once_);
void protobuf_AddDesc_Ball_5fmessage_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_Ball_5fmessage_2eproto_once_,
                 &protobuf_AddDesc_Ball_5fmessage_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Ball_5fmessage_2eproto {
  StaticDescriptorInitializer_Ball_5fmessage_2eproto() {
    protobuf_AddDesc_Ball_5fmessage_2eproto();
  }
} static_descriptor_initializer_Ball_5fmessage_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ball_message::kIsValidFieldNumber;
const int Ball_message::kPositionFieldNumber;
const int Ball_message::kVelocityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ball_message::Ball_message()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_Ball_5fmessage_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Ball_message)
}
Ball_message::Ball_message(const Ball_message& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::position_message(*from.position_);
  } else {
    position_ = NULL;
  }
  if (from.has_velocity()) {
    velocity_ = new ::position_message(*from.velocity_);
  } else {
    velocity_ = NULL;
  }
  isvalid_ = from.isvalid_;
  // @@protoc_insertion_point(copy_constructor:Ball_message)
}

void Ball_message::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&position_, 0, reinterpret_cast<char*>(&isvalid_) -
    reinterpret_cast<char*>(&position_) + sizeof(isvalid_));
}

Ball_message::~Ball_message() {
  // @@protoc_insertion_point(destructor:Ball_message)
  SharedDtor();
}

void Ball_message::SharedDtor() {
  if (this != internal_default_instance()) {
    delete position_;
  }
  if (this != internal_default_instance()) {
    delete velocity_;
  }
}

void Ball_message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ball_message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[0].descriptor;
}

const Ball_message& Ball_message::default_instance() {
  protobuf_InitDefaults_Ball_5fmessage_2eproto();
  return *internal_default_instance();
}

Ball_message* Ball_message::New(::google::protobuf::Arena* arena) const {
  Ball_message* n = new Ball_message;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ball_message::Clear() {
// @@protoc_insertion_point(message_clear_start:Ball_message)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_position()) {
      GOOGLE_DCHECK(position_ != NULL);
      position_->::position_message::Clear();
    }
    if (has_velocity()) {
      GOOGLE_DCHECK(velocity_ != NULL);
      velocity_->::position_message::Clear();
    }
  }
  isvalid_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Ball_message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Ball_message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool isValid = 1;
      case 1: {
        if (tag == 8u) {
          set_has_isvalid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isvalid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .position_message position = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .position_message velocity = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Ball_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Ball_message)
  return false;
#undef DO_
}

void Ball_message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Ball_message)
  // required bool isValid = 1;
  if (has_isvalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isvalid(), output);
  }

  // required .position_message position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->position_, output);
  }

  // required .position_message velocity = 3;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->velocity_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Ball_message)
}

::google::protobuf::uint8* Ball_message::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Ball_message)
  // required bool isValid = 1;
  if (has_isvalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isvalid(), target);
  }

  // required .position_message position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->position_, false, target);
  }

  // required .position_message velocity = 3;
  if (has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->velocity_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Ball_message)
  return target;
}

size_t Ball_message::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Ball_message)
  size_t total_size = 0;

  if (has_position()) {
    // required .position_message position = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->position_);
  }

  if (has_velocity()) {
    // required .position_message velocity = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->velocity_);
  }

  if (has_isvalid()) {
    // required bool isValid = 1;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t Ball_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Ball_message)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .position_message position = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->position_);

    // required .position_message velocity = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->velocity_);

    // required bool isValid = 1;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ball_message::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Ball_message)
  GOOGLE_DCHECK_NE(&from, this);
  const Ball_message* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ball_message>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Ball_message)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Ball_message)
    MergeFrom(*source);
  }
}

void Ball_message::MergeFrom(const Ball_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Ball_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_position()) {
      mutable_position()->::position_message::MergeFrom(from.position());
    }
    if (from.has_velocity()) {
      mutable_velocity()->::position_message::MergeFrom(from.velocity());
    }
    if (from.has_isvalid()) {
      set_isvalid(from.isvalid());
    }
  }
}

void Ball_message::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Ball_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ball_message::CopyFrom(const Ball_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Ball_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ball_message::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_position()) {
    if (!this->position_->IsInitialized()) return false;
  }
  if (has_velocity()) {
    if (!this->velocity_->IsInitialized()) return false;
  }
  return true;
}

void Ball_message::Swap(Ball_message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ball_message::InternalSwap(Ball_message* other) {
  std::swap(position_, other->position_);
  std::swap(velocity_, other->velocity_);
  std::swap(isvalid_, other->isvalid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ball_message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Ball_message

// required bool isValid = 1;
bool Ball_message::has_isvalid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Ball_message::set_has_isvalid() {
  _has_bits_[0] |= 0x00000004u;
}
void Ball_message::clear_has_isvalid() {
  _has_bits_[0] &= ~0x00000004u;
}
void Ball_message::clear_isvalid() {
  isvalid_ = false;
  clear_has_isvalid();
}
bool Ball_message::isvalid() const {
  // @@protoc_insertion_point(field_get:Ball_message.isValid)
  return isvalid_;
}
void Ball_message::set_isvalid(bool value) {
  set_has_isvalid();
  isvalid_ = value;
  // @@protoc_insertion_point(field_set:Ball_message.isValid)
}

// required .position_message position = 2;
bool Ball_message::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Ball_message::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
void Ball_message::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
void Ball_message::clear_position() {
  if (position_ != NULL) position_->::position_message::Clear();
  clear_has_position();
}
const ::position_message& Ball_message::position() const {
  // @@protoc_insertion_point(field_get:Ball_message.position)
  return position_ != NULL ? *position_
                         : *::position_message::internal_default_instance();
}
::position_message* Ball_message::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::position_message;
  }
  // @@protoc_insertion_point(field_mutable:Ball_message.position)
  return position_;
}
::position_message* Ball_message::release_position() {
  // @@protoc_insertion_point(field_release:Ball_message.position)
  clear_has_position();
  ::position_message* temp = position_;
  position_ = NULL;
  return temp;
}
void Ball_message::set_allocated_position(::position_message* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:Ball_message.position)
}

// required .position_message velocity = 3;
bool Ball_message::has_velocity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Ball_message::set_has_velocity() {
  _has_bits_[0] |= 0x00000002u;
}
void Ball_message::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000002u;
}
void Ball_message::clear_velocity() {
  if (velocity_ != NULL) velocity_->::position_message::Clear();
  clear_has_velocity();
}
const ::position_message& Ball_message::velocity() const {
  // @@protoc_insertion_point(field_get:Ball_message.velocity)
  return velocity_ != NULL ? *velocity_
                         : *::position_message::internal_default_instance();
}
::position_message* Ball_message::mutable_velocity() {
  set_has_velocity();
  if (velocity_ == NULL) {
    velocity_ = new ::position_message;
  }
  // @@protoc_insertion_point(field_mutable:Ball_message.velocity)
  return velocity_;
}
::position_message* Ball_message::release_velocity() {
  // @@protoc_insertion_point(field_release:Ball_message.velocity)
  clear_has_velocity();
  ::position_message* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
void Ball_message::set_allocated_velocity(::position_message* velocity) {
  delete velocity_;
  velocity_ = velocity;
  if (velocity) {
    set_has_velocity();
  } else {
    clear_has_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:Ball_message.velocity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

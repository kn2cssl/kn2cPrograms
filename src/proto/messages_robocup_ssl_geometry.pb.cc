// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages_robocup_ssl_geometry.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "messages_robocup_ssl_geometry.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class Vector2fDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Vector2f> {};
Vector2fDefaultTypeInternal _Vector2f_default_instance_;
class SSL_FieldLineSegmentDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SSL_FieldLineSegment> {};
SSL_FieldLineSegmentDefaultTypeInternal _SSL_FieldLineSegment_default_instance_;
class SSL_FieldCicularArcDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SSL_FieldCicularArc> {};
SSL_FieldCicularArcDefaultTypeInternal _SSL_FieldCicularArc_default_instance_;
class SSL_GeometryFieldSizeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SSL_GeometryFieldSize> {};
SSL_GeometryFieldSizeDefaultTypeInternal _SSL_GeometryFieldSize_default_instance_;
class SSL_GeometryCameraCalibrationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SSL_GeometryCameraCalibration> {};
SSL_GeometryCameraCalibrationDefaultTypeInternal _SSL_GeometryCameraCalibration_default_instance_;
class SSL_GeometryDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SSL_GeometryData> {};
SSL_GeometryDataDefaultTypeInternal _SSL_GeometryData_default_instance_;

namespace {

::google::protobuf::Metadata file_level_metadata[6];

}  // namespace


const ::google::protobuf::uint32* protobuf_Offsets_messages_5frobocup_5fssl_5fgeometry_2eproto() GOOGLE_ATTRIBUTE_COLD;
const ::google::protobuf::uint32* protobuf_Offsets_messages_5frobocup_5fssl_5fgeometry_2eproto() {
  static const ::google::protobuf::uint32 offsets[] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2f, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2f, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2f, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2f, y_),
    0,
    1,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_FieldLineSegment, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_FieldLineSegment, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_FieldLineSegment, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_FieldLineSegment, p1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_FieldLineSegment, p2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_FieldLineSegment, thickness_),
    0,
    1,
    2,
    3,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_FieldCicularArc, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_FieldCicularArc, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_FieldCicularArc, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_FieldCicularArc, center_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_FieldCicularArc, radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_FieldCicularArc, a1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_FieldCicularArc, a2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_FieldCicularArc, thickness_),
    0,
    1,
    2,
    3,
    4,
    5,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryFieldSize, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryFieldSize, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryFieldSize, field_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryFieldSize, field_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryFieldSize, goal_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryFieldSize, goal_depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryFieldSize, boundary_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryFieldSize, field_lines_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryFieldSize, field_arcs_),
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, camera_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, focal_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, principal_point_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, principal_point_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, distortion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, q0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, q1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, q2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, q3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, tx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, ty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, tz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, derived_camera_world_tx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, derived_camera_world_ty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, derived_camera_world_tz_),
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryData, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryData, field_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryData, calib_),
    0,
    1,
  };
  return offsets;
}

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 6, sizeof(Vector2f)},
  { 8, 16, sizeof(SSL_FieldLineSegment)},
  { 20, 30, sizeof(SSL_FieldCicularArc)},
  { 36, 47, sizeof(SSL_GeometryFieldSize)},
  { 54, 73, sizeof(SSL_GeometryCameraCalibration)},
  { 88, 94, sizeof(SSL_GeometryData)},
};

static const ::google::protobuf::internal::DefaultInstanceData file_default_instances[] = {
  {reinterpret_cast<const ::google::protobuf::Message*>(&_Vector2f_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_SSL_FieldLineSegment_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_SSL_FieldCicularArc_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_SSL_GeometryFieldSize_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_SSL_GeometryCameraCalibration_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_SSL_GeometryData_default_instance_), NULL},
};

namespace {

void protobuf_AssignDescriptors() {
  protobuf_AddDesc_messages_5frobocup_5fssl_5fgeometry_2eproto();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "messages_robocup_ssl_geometry.proto", schemas, file_default_instances, protobuf_Offsets_messages_5frobocup_5fssl_5fgeometry_2eproto(), factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

}  // namespace

void protobuf_ShutdownFile_messages_5frobocup_5fssl_5fgeometry_2eproto() {
  _Vector2f_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _SSL_FieldLineSegment_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _SSL_FieldCicularArc_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _SSL_GeometryFieldSize_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _SSL_GeometryCameraCalibration_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _SSL_GeometryData_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
}

void protobuf_InitDefaults_messages_5frobocup_5fssl_5fgeometry_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Vector2f_default_instance_.DefaultConstruct();
  _SSL_FieldLineSegment_default_instance_.DefaultConstruct();
  _SSL_FieldCicularArc_default_instance_.DefaultConstruct();
  _SSL_GeometryFieldSize_default_instance_.DefaultConstruct();
  _SSL_GeometryCameraCalibration_default_instance_.DefaultConstruct();
  _SSL_GeometryData_default_instance_.DefaultConstruct();
  _SSL_FieldLineSegment_default_instance_.get_mutable()->p1_ = const_cast< ::Vector2f*>(
      ::Vector2f::internal_default_instance());
  _SSL_FieldLineSegment_default_instance_.get_mutable()->p2_ = const_cast< ::Vector2f*>(
      ::Vector2f::internal_default_instance());
  _SSL_FieldCicularArc_default_instance_.get_mutable()->center_ = const_cast< ::Vector2f*>(
      ::Vector2f::internal_default_instance());
  _SSL_GeometryData_default_instance_.get_mutable()->field_ = const_cast< ::SSL_GeometryFieldSize*>(
      ::SSL_GeometryFieldSize::internal_default_instance());
}

void protobuf_InitDefaults_messages_5frobocup_5fssl_5fgeometry_2eproto() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_InitDefaults_messages_5frobocup_5fssl_5fgeometry_2eproto_impl);
}
void protobuf_AddDesc_messages_5frobocup_5fssl_5fgeometry_2eproto_impl() {
  protobuf_InitDefaults_messages_5frobocup_5fssl_5fgeometry_2eproto();
  static const char descriptor[] = {
      "\n#messages_robocup_ssl_geometry.proto\" \n"
      "\010Vector2f\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\"e\n\024SSL_F"
      "ieldLineSegment\022\014\n\004name\030\001 \002(\t\022\025\n\002p1\030\002 \002("
      "\0132\t.Vector2f\022\025\n\002p2\030\003 \002(\0132\t.Vector2f\022\021\n\tt"
      "hickness\030\004 \002(\002\"y\n\023SSL_FieldCicularArc\022\014\n"
      "\004name\030\001 \002(\t\022\031\n\006center\030\002 \002(\0132\t.Vector2f\022\016"
      "\n\006radius\030\003 \002(\002\022\n\n\002a1\030\004 \002(\002\022\n\n\002a2\030\005 \002(\002\022\021"
      "\n\tthickness\030\006 \002(\002\"\330\001\n\025SSL_GeometryFieldS"
      "ize\022\024\n\014field_length\030\001 \002(\005\022\023\n\013field_width"
      "\030\002 \002(\005\022\022\n\ngoal_width\030\003 \002(\005\022\022\n\ngoal_depth"
      "\030\004 \002(\005\022\026\n\016boundary_width\030\005 \002(\005\022*\n\013field_"
      "lines\030\006 \003(\0132\025.SSL_FieldLineSegment\022(\n\nfi"
      "eld_arcs\030\007 \003(\0132\024.SSL_FieldCicularArc\"\311\002\n"
      "\035SSL_GeometryCameraCalibration\022\021\n\tcamera"
      "_id\030\001 \002(\r\022\024\n\014focal_length\030\002 \002(\002\022\031\n\021princ"
      "ipal_point_x\030\003 \002(\002\022\031\n\021principal_point_y\030"
      "\004 \002(\002\022\022\n\ndistortion\030\005 \002(\002\022\n\n\002q0\030\006 \002(\002\022\n\n"
      "\002q1\030\007 \002(\002\022\n\n\002q2\030\010 \002(\002\022\n\n\002q3\030\t \002(\002\022\n\n\002tx\030"
      "\n \002(\002\022\n\n\002ty\030\013 \002(\002\022\n\n\002tz\030\014 \002(\002\022\037\n\027derived"
      "_camera_world_tx\030\r \001(\002\022\037\n\027derived_camera"
      "_world_ty\030\016 \001(\002\022\037\n\027derived_camera_world_"
      "tz\030\017 \001(\002\"h\n\020SSL_GeometryData\022%\n\005field\030\001 "
      "\002(\0132\026.SSL_GeometryFieldSize\022-\n\005calib\030\002 \003"
      "(\0132\036.SSL_GeometryCameraCalibration"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 954);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messages_robocup_ssl_geometry.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_messages_5frobocup_5fssl_5fgeometry_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_messages_5frobocup_5fssl_5fgeometry_2eproto_once_);
void protobuf_AddDesc_messages_5frobocup_5fssl_5fgeometry_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_messages_5frobocup_5fssl_5fgeometry_2eproto_once_,
                 &protobuf_AddDesc_messages_5frobocup_5fssl_5fgeometry_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_messages_5frobocup_5fssl_5fgeometry_2eproto {
  StaticDescriptorInitializer_messages_5frobocup_5fssl_5fgeometry_2eproto() {
    protobuf_AddDesc_messages_5frobocup_5fssl_5fgeometry_2eproto();
  }
} static_descriptor_initializer_messages_5frobocup_5fssl_5fgeometry_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector2f::kXFieldNumber;
const int Vector2f::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector2f::Vector2f()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_messages_5frobocup_5fssl_5fgeometry_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Vector2f)
}
Vector2f::Vector2f(const Vector2f& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:Vector2f)
}

void Vector2f::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_) + sizeof(y_));
}

Vector2f::~Vector2f() {
  // @@protoc_insertion_point(destructor:Vector2f)
  SharedDtor();
}

void Vector2f::SharedDtor() {
}

void Vector2f::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector2f::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[0].descriptor;
}

const Vector2f& Vector2f::default_instance() {
  protobuf_InitDefaults_messages_5frobocup_5fssl_5fgeometry_2eproto();
  return *internal_default_instance();
}

Vector2f* Vector2f::New(::google::protobuf::Arena* arena) const {
  Vector2f* n = new Vector2f;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vector2f::Clear() {
// @@protoc_insertion_point(message_clear_start:Vector2f)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&x_, 0, reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Vector2f::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Vector2f)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (tag == 13u) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float y = 2;
      case 2: {
        if (tag == 21u) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Vector2f)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Vector2f)
  return false;
#undef DO_
}

void Vector2f::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Vector2f)
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Vector2f)
}

::google::protobuf::uint8* Vector2f::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Vector2f)
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Vector2f)
  return target;
}

size_t Vector2f::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Vector2f)
  size_t total_size = 0;

  if (has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Vector2f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Vector2f)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector2f::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Vector2f)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector2f* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector2f>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Vector2f)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Vector2f)
    MergeFrom(*source);
  }
}

void Vector2f::MergeFrom(const Vector2f& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Vector2f)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
}

void Vector2f::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Vector2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector2f::CopyFrom(const Vector2f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Vector2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector2f::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Vector2f::Swap(Vector2f* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vector2f::InternalSwap(Vector2f* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vector2f::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vector2f

// required float x = 1;
bool Vector2f::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Vector2f::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Vector2f::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Vector2f::clear_x() {
  x_ = 0;
  clear_has_x();
}
float Vector2f::x() const {
  // @@protoc_insertion_point(field_get:Vector2f.x)
  return x_;
}
void Vector2f::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:Vector2f.x)
}

// required float y = 2;
bool Vector2f::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Vector2f::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Vector2f::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Vector2f::clear_y() {
  y_ = 0;
  clear_has_y();
}
float Vector2f::y() const {
  // @@protoc_insertion_point(field_get:Vector2f.y)
  return y_;
}
void Vector2f::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:Vector2f.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SSL_FieldLineSegment::kNameFieldNumber;
const int SSL_FieldLineSegment::kP1FieldNumber;
const int SSL_FieldLineSegment::kP2FieldNumber;
const int SSL_FieldLineSegment::kThicknessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SSL_FieldLineSegment::SSL_FieldLineSegment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_messages_5frobocup_5fssl_5fgeometry_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSL_FieldLineSegment)
}
SSL_FieldLineSegment::SSL_FieldLineSegment(const SSL_FieldLineSegment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_p1()) {
    p1_ = new ::Vector2f(*from.p1_);
  } else {
    p1_ = NULL;
  }
  if (from.has_p2()) {
    p2_ = new ::Vector2f(*from.p2_);
  } else {
    p2_ = NULL;
  }
  thickness_ = from.thickness_;
  // @@protoc_insertion_point(copy_constructor:SSL_FieldLineSegment)
}

void SSL_FieldLineSegment::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&p1_, 0, reinterpret_cast<char*>(&thickness_) -
    reinterpret_cast<char*>(&p1_) + sizeof(thickness_));
}

SSL_FieldLineSegment::~SSL_FieldLineSegment() {
  // @@protoc_insertion_point(destructor:SSL_FieldLineSegment)
  SharedDtor();
}

void SSL_FieldLineSegment::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete p1_;
  }
  if (this != internal_default_instance()) {
    delete p2_;
  }
}

void SSL_FieldLineSegment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSL_FieldLineSegment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[1].descriptor;
}

const SSL_FieldLineSegment& SSL_FieldLineSegment::default_instance() {
  protobuf_InitDefaults_messages_5frobocup_5fssl_5fgeometry_2eproto();
  return *internal_default_instance();
}

SSL_FieldLineSegment* SSL_FieldLineSegment::New(::google::protobuf::Arena* arena) const {
  SSL_FieldLineSegment* n = new SSL_FieldLineSegment;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SSL_FieldLineSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_FieldLineSegment)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_p1()) {
      GOOGLE_DCHECK(p1_ != NULL);
      p1_->::Vector2f::Clear();
    }
    if (has_p2()) {
      GOOGLE_DCHECK(p2_ != NULL);
      p2_->::Vector2f::Clear();
    }
  }
  thickness_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SSL_FieldLineSegment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSL_FieldLineSegment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SSL_FieldLineSegment.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .Vector2f p1 = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_p1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .Vector2f p2 = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_p2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float thickness = 4;
      case 4: {
        if (tag == 37u) {
          set_has_thickness();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &thickness_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSL_FieldLineSegment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSL_FieldLineSegment)
  return false;
#undef DO_
}

void SSL_FieldLineSegment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSL_FieldLineSegment)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SSL_FieldLineSegment.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required .Vector2f p1 = 2;
  if (has_p1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->p1_, output);
  }

  // required .Vector2f p2 = 3;
  if (has_p2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->p2_, output);
  }

  // required float thickness = 4;
  if (has_thickness()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->thickness(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSL_FieldLineSegment)
}

::google::protobuf::uint8* SSL_FieldLineSegment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SSL_FieldLineSegment)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SSL_FieldLineSegment.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .Vector2f p1 = 2;
  if (has_p1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->p1_, false, target);
  }

  // required .Vector2f p2 = 3;
  if (has_p2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->p2_, false, target);
  }

  // required float thickness = 4;
  if (has_thickness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->thickness(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSL_FieldLineSegment)
  return target;
}

size_t SSL_FieldLineSegment::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SSL_FieldLineSegment)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_p1()) {
    // required .Vector2f p1 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->p1_);
  }

  if (has_p2()) {
    // required .Vector2f p2 = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->p2_);
  }

  if (has_thickness()) {
    // required float thickness = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t SSL_FieldLineSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_FieldLineSegment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required .Vector2f p1 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->p1_);

    // required .Vector2f p2 = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->p2_);

    // required float thickness = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSL_FieldLineSegment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SSL_FieldLineSegment)
  GOOGLE_DCHECK_NE(&from, this);
  const SSL_FieldLineSegment* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SSL_FieldLineSegment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SSL_FieldLineSegment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SSL_FieldLineSegment)
    MergeFrom(*source);
  }
}

void SSL_FieldLineSegment::MergeFrom(const SSL_FieldLineSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSL_FieldLineSegment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_p1()) {
      mutable_p1()->::Vector2f::MergeFrom(from.p1());
    }
    if (from.has_p2()) {
      mutable_p2()->::Vector2f::MergeFrom(from.p2());
    }
    if (from.has_thickness()) {
      set_thickness(from.thickness());
    }
  }
}

void SSL_FieldLineSegment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SSL_FieldLineSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSL_FieldLineSegment::CopyFrom(const SSL_FieldLineSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_FieldLineSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_FieldLineSegment::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (has_p1()) {
    if (!this->p1_->IsInitialized()) return false;
  }
  if (has_p2()) {
    if (!this->p2_->IsInitialized()) return false;
  }
  return true;
}

void SSL_FieldLineSegment::Swap(SSL_FieldLineSegment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SSL_FieldLineSegment::InternalSwap(SSL_FieldLineSegment* other) {
  name_.Swap(&other->name_);
  std::swap(p1_, other->p1_);
  std::swap(p2_, other->p2_);
  std::swap(thickness_, other->thickness_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SSL_FieldLineSegment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SSL_FieldLineSegment

// required string name = 1;
bool SSL_FieldLineSegment::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SSL_FieldLineSegment::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void SSL_FieldLineSegment::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void SSL_FieldLineSegment::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& SSL_FieldLineSegment::name() const {
  // @@protoc_insertion_point(field_get:SSL_FieldLineSegment.name)
  return name_.GetNoArena();
}
void SSL_FieldLineSegment::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SSL_FieldLineSegment.name)
}
#if LANG_CXX11
void SSL_FieldLineSegment::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SSL_FieldLineSegment.name)
}
#endif
void SSL_FieldLineSegment::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SSL_FieldLineSegment.name)
}
void SSL_FieldLineSegment::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SSL_FieldLineSegment.name)
}
::std::string* SSL_FieldLineSegment::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:SSL_FieldLineSegment.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SSL_FieldLineSegment::release_name() {
  // @@protoc_insertion_point(field_release:SSL_FieldLineSegment.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SSL_FieldLineSegment::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:SSL_FieldLineSegment.name)
}

// required .Vector2f p1 = 2;
bool SSL_FieldLineSegment::has_p1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SSL_FieldLineSegment::set_has_p1() {
  _has_bits_[0] |= 0x00000002u;
}
void SSL_FieldLineSegment::clear_has_p1() {
  _has_bits_[0] &= ~0x00000002u;
}
void SSL_FieldLineSegment::clear_p1() {
  if (p1_ != NULL) p1_->::Vector2f::Clear();
  clear_has_p1();
}
const ::Vector2f& SSL_FieldLineSegment::p1() const {
  // @@protoc_insertion_point(field_get:SSL_FieldLineSegment.p1)
  return p1_ != NULL ? *p1_
                         : *::Vector2f::internal_default_instance();
}
::Vector2f* SSL_FieldLineSegment::mutable_p1() {
  set_has_p1();
  if (p1_ == NULL) {
    p1_ = new ::Vector2f;
  }
  // @@protoc_insertion_point(field_mutable:SSL_FieldLineSegment.p1)
  return p1_;
}
::Vector2f* SSL_FieldLineSegment::release_p1() {
  // @@protoc_insertion_point(field_release:SSL_FieldLineSegment.p1)
  clear_has_p1();
  ::Vector2f* temp = p1_;
  p1_ = NULL;
  return temp;
}
void SSL_FieldLineSegment::set_allocated_p1(::Vector2f* p1) {
  delete p1_;
  p1_ = p1;
  if (p1) {
    set_has_p1();
  } else {
    clear_has_p1();
  }
  // @@protoc_insertion_point(field_set_allocated:SSL_FieldLineSegment.p1)
}

// required .Vector2f p2 = 3;
bool SSL_FieldLineSegment::has_p2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SSL_FieldLineSegment::set_has_p2() {
  _has_bits_[0] |= 0x00000004u;
}
void SSL_FieldLineSegment::clear_has_p2() {
  _has_bits_[0] &= ~0x00000004u;
}
void SSL_FieldLineSegment::clear_p2() {
  if (p2_ != NULL) p2_->::Vector2f::Clear();
  clear_has_p2();
}
const ::Vector2f& SSL_FieldLineSegment::p2() const {
  // @@protoc_insertion_point(field_get:SSL_FieldLineSegment.p2)
  return p2_ != NULL ? *p2_
                         : *::Vector2f::internal_default_instance();
}
::Vector2f* SSL_FieldLineSegment::mutable_p2() {
  set_has_p2();
  if (p2_ == NULL) {
    p2_ = new ::Vector2f;
  }
  // @@protoc_insertion_point(field_mutable:SSL_FieldLineSegment.p2)
  return p2_;
}
::Vector2f* SSL_FieldLineSegment::release_p2() {
  // @@protoc_insertion_point(field_release:SSL_FieldLineSegment.p2)
  clear_has_p2();
  ::Vector2f* temp = p2_;
  p2_ = NULL;
  return temp;
}
void SSL_FieldLineSegment::set_allocated_p2(::Vector2f* p2) {
  delete p2_;
  p2_ = p2;
  if (p2) {
    set_has_p2();
  } else {
    clear_has_p2();
  }
  // @@protoc_insertion_point(field_set_allocated:SSL_FieldLineSegment.p2)
}

// required float thickness = 4;
bool SSL_FieldLineSegment::has_thickness() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SSL_FieldLineSegment::set_has_thickness() {
  _has_bits_[0] |= 0x00000008u;
}
void SSL_FieldLineSegment::clear_has_thickness() {
  _has_bits_[0] &= ~0x00000008u;
}
void SSL_FieldLineSegment::clear_thickness() {
  thickness_ = 0;
  clear_has_thickness();
}
float SSL_FieldLineSegment::thickness() const {
  // @@protoc_insertion_point(field_get:SSL_FieldLineSegment.thickness)
  return thickness_;
}
void SSL_FieldLineSegment::set_thickness(float value) {
  set_has_thickness();
  thickness_ = value;
  // @@protoc_insertion_point(field_set:SSL_FieldLineSegment.thickness)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SSL_FieldCicularArc::kNameFieldNumber;
const int SSL_FieldCicularArc::kCenterFieldNumber;
const int SSL_FieldCicularArc::kRadiusFieldNumber;
const int SSL_FieldCicularArc::kA1FieldNumber;
const int SSL_FieldCicularArc::kA2FieldNumber;
const int SSL_FieldCicularArc::kThicknessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SSL_FieldCicularArc::SSL_FieldCicularArc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_messages_5frobocup_5fssl_5fgeometry_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSL_FieldCicularArc)
}
SSL_FieldCicularArc::SSL_FieldCicularArc(const SSL_FieldCicularArc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_center()) {
    center_ = new ::Vector2f(*from.center_);
  } else {
    center_ = NULL;
  }
  ::memcpy(&radius_, &from.radius_,
    reinterpret_cast<char*>(&thickness_) -
    reinterpret_cast<char*>(&radius_) + sizeof(thickness_));
  // @@protoc_insertion_point(copy_constructor:SSL_FieldCicularArc)
}

void SSL_FieldCicularArc::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&center_, 0, reinterpret_cast<char*>(&thickness_) -
    reinterpret_cast<char*>(&center_) + sizeof(thickness_));
}

SSL_FieldCicularArc::~SSL_FieldCicularArc() {
  // @@protoc_insertion_point(destructor:SSL_FieldCicularArc)
  SharedDtor();
}

void SSL_FieldCicularArc::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete center_;
  }
}

void SSL_FieldCicularArc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSL_FieldCicularArc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[2].descriptor;
}

const SSL_FieldCicularArc& SSL_FieldCicularArc::default_instance() {
  protobuf_InitDefaults_messages_5frobocup_5fssl_5fgeometry_2eproto();
  return *internal_default_instance();
}

SSL_FieldCicularArc* SSL_FieldCicularArc::New(::google::protobuf::Arena* arena) const {
  SSL_FieldCicularArc* n = new SSL_FieldCicularArc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SSL_FieldCicularArc::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_FieldCicularArc)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_center()) {
      GOOGLE_DCHECK(center_ != NULL);
      center_->::Vector2f::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 60u) {
    ::memset(&radius_, 0, reinterpret_cast<char*>(&thickness_) -
      reinterpret_cast<char*>(&radius_) + sizeof(thickness_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SSL_FieldCicularArc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSL_FieldCicularArc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SSL_FieldCicularArc.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .Vector2f center = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_center()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float radius = 3;
      case 3: {
        if (tag == 29u) {
          set_has_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float a1 = 4;
      case 4: {
        if (tag == 37u) {
          set_has_a1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &a1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float a2 = 5;
      case 5: {
        if (tag == 45u) {
          set_has_a2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &a2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float thickness = 6;
      case 6: {
        if (tag == 53u) {
          set_has_thickness();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &thickness_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSL_FieldCicularArc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSL_FieldCicularArc)
  return false;
#undef DO_
}

void SSL_FieldCicularArc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSL_FieldCicularArc)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SSL_FieldCicularArc.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required .Vector2f center = 2;
  if (has_center()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->center_, output);
  }

  // required float radius = 3;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->radius(), output);
  }

  // required float a1 = 4;
  if (has_a1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->a1(), output);
  }

  // required float a2 = 5;
  if (has_a2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->a2(), output);
  }

  // required float thickness = 6;
  if (has_thickness()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->thickness(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSL_FieldCicularArc)
}

::google::protobuf::uint8* SSL_FieldCicularArc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SSL_FieldCicularArc)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SSL_FieldCicularArc.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .Vector2f center = 2;
  if (has_center()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->center_, false, target);
  }

  // required float radius = 3;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->radius(), target);
  }

  // required float a1 = 4;
  if (has_a1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->a1(), target);
  }

  // required float a2 = 5;
  if (has_a2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->a2(), target);
  }

  // required float thickness = 6;
  if (has_thickness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->thickness(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSL_FieldCicularArc)
  return target;
}

size_t SSL_FieldCicularArc::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SSL_FieldCicularArc)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_center()) {
    // required .Vector2f center = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->center_);
  }

  if (has_radius()) {
    // required float radius = 3;
    total_size += 1 + 4;
  }

  if (has_a1()) {
    // required float a1 = 4;
    total_size += 1 + 4;
  }

  if (has_a2()) {
    // required float a2 = 5;
    total_size += 1 + 4;
  }

  if (has_thickness()) {
    // required float thickness = 6;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t SSL_FieldCicularArc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_FieldCicularArc)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required .Vector2f center = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->center_);

    // required float radius = 3;
    total_size += 1 + 4;

    // required float a1 = 4;
    total_size += 1 + 4;

    // required float a2 = 5;
    total_size += 1 + 4;

    // required float thickness = 6;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSL_FieldCicularArc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SSL_FieldCicularArc)
  GOOGLE_DCHECK_NE(&from, this);
  const SSL_FieldCicularArc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SSL_FieldCicularArc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SSL_FieldCicularArc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SSL_FieldCicularArc)
    MergeFrom(*source);
  }
}

void SSL_FieldCicularArc::MergeFrom(const SSL_FieldCicularArc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSL_FieldCicularArc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 63u) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_center()) {
      mutable_center()->::Vector2f::MergeFrom(from.center());
    }
    if (from.has_radius()) {
      set_radius(from.radius());
    }
    if (from.has_a1()) {
      set_a1(from.a1());
    }
    if (from.has_a2()) {
      set_a2(from.a2());
    }
    if (from.has_thickness()) {
      set_thickness(from.thickness());
    }
  }
}

void SSL_FieldCicularArc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SSL_FieldCicularArc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSL_FieldCicularArc::CopyFrom(const SSL_FieldCicularArc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_FieldCicularArc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_FieldCicularArc::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  if (has_center()) {
    if (!this->center_->IsInitialized()) return false;
  }
  return true;
}

void SSL_FieldCicularArc::Swap(SSL_FieldCicularArc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SSL_FieldCicularArc::InternalSwap(SSL_FieldCicularArc* other) {
  name_.Swap(&other->name_);
  std::swap(center_, other->center_);
  std::swap(radius_, other->radius_);
  std::swap(a1_, other->a1_);
  std::swap(a2_, other->a2_);
  std::swap(thickness_, other->thickness_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SSL_FieldCicularArc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SSL_FieldCicularArc

// required string name = 1;
bool SSL_FieldCicularArc::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SSL_FieldCicularArc::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void SSL_FieldCicularArc::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void SSL_FieldCicularArc::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& SSL_FieldCicularArc::name() const {
  // @@protoc_insertion_point(field_get:SSL_FieldCicularArc.name)
  return name_.GetNoArena();
}
void SSL_FieldCicularArc::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SSL_FieldCicularArc.name)
}
#if LANG_CXX11
void SSL_FieldCicularArc::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SSL_FieldCicularArc.name)
}
#endif
void SSL_FieldCicularArc::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SSL_FieldCicularArc.name)
}
void SSL_FieldCicularArc::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SSL_FieldCicularArc.name)
}
::std::string* SSL_FieldCicularArc::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:SSL_FieldCicularArc.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SSL_FieldCicularArc::release_name() {
  // @@protoc_insertion_point(field_release:SSL_FieldCicularArc.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SSL_FieldCicularArc::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:SSL_FieldCicularArc.name)
}

// required .Vector2f center = 2;
bool SSL_FieldCicularArc::has_center() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SSL_FieldCicularArc::set_has_center() {
  _has_bits_[0] |= 0x00000002u;
}
void SSL_FieldCicularArc::clear_has_center() {
  _has_bits_[0] &= ~0x00000002u;
}
void SSL_FieldCicularArc::clear_center() {
  if (center_ != NULL) center_->::Vector2f::Clear();
  clear_has_center();
}
const ::Vector2f& SSL_FieldCicularArc::center() const {
  // @@protoc_insertion_point(field_get:SSL_FieldCicularArc.center)
  return center_ != NULL ? *center_
                         : *::Vector2f::internal_default_instance();
}
::Vector2f* SSL_FieldCicularArc::mutable_center() {
  set_has_center();
  if (center_ == NULL) {
    center_ = new ::Vector2f;
  }
  // @@protoc_insertion_point(field_mutable:SSL_FieldCicularArc.center)
  return center_;
}
::Vector2f* SSL_FieldCicularArc::release_center() {
  // @@protoc_insertion_point(field_release:SSL_FieldCicularArc.center)
  clear_has_center();
  ::Vector2f* temp = center_;
  center_ = NULL;
  return temp;
}
void SSL_FieldCicularArc::set_allocated_center(::Vector2f* center) {
  delete center_;
  center_ = center;
  if (center) {
    set_has_center();
  } else {
    clear_has_center();
  }
  // @@protoc_insertion_point(field_set_allocated:SSL_FieldCicularArc.center)
}

// required float radius = 3;
bool SSL_FieldCicularArc::has_radius() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SSL_FieldCicularArc::set_has_radius() {
  _has_bits_[0] |= 0x00000004u;
}
void SSL_FieldCicularArc::clear_has_radius() {
  _has_bits_[0] &= ~0x00000004u;
}
void SSL_FieldCicularArc::clear_radius() {
  radius_ = 0;
  clear_has_radius();
}
float SSL_FieldCicularArc::radius() const {
  // @@protoc_insertion_point(field_get:SSL_FieldCicularArc.radius)
  return radius_;
}
void SSL_FieldCicularArc::set_radius(float value) {
  set_has_radius();
  radius_ = value;
  // @@protoc_insertion_point(field_set:SSL_FieldCicularArc.radius)
}

// required float a1 = 4;
bool SSL_FieldCicularArc::has_a1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SSL_FieldCicularArc::set_has_a1() {
  _has_bits_[0] |= 0x00000008u;
}
void SSL_FieldCicularArc::clear_has_a1() {
  _has_bits_[0] &= ~0x00000008u;
}
void SSL_FieldCicularArc::clear_a1() {
  a1_ = 0;
  clear_has_a1();
}
float SSL_FieldCicularArc::a1() const {
  // @@protoc_insertion_point(field_get:SSL_FieldCicularArc.a1)
  return a1_;
}
void SSL_FieldCicularArc::set_a1(float value) {
  set_has_a1();
  a1_ = value;
  // @@protoc_insertion_point(field_set:SSL_FieldCicularArc.a1)
}

// required float a2 = 5;
bool SSL_FieldCicularArc::has_a2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SSL_FieldCicularArc::set_has_a2() {
  _has_bits_[0] |= 0x00000010u;
}
void SSL_FieldCicularArc::clear_has_a2() {
  _has_bits_[0] &= ~0x00000010u;
}
void SSL_FieldCicularArc::clear_a2() {
  a2_ = 0;
  clear_has_a2();
}
float SSL_FieldCicularArc::a2() const {
  // @@protoc_insertion_point(field_get:SSL_FieldCicularArc.a2)
  return a2_;
}
void SSL_FieldCicularArc::set_a2(float value) {
  set_has_a2();
  a2_ = value;
  // @@protoc_insertion_point(field_set:SSL_FieldCicularArc.a2)
}

// required float thickness = 6;
bool SSL_FieldCicularArc::has_thickness() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SSL_FieldCicularArc::set_has_thickness() {
  _has_bits_[0] |= 0x00000020u;
}
void SSL_FieldCicularArc::clear_has_thickness() {
  _has_bits_[0] &= ~0x00000020u;
}
void SSL_FieldCicularArc::clear_thickness() {
  thickness_ = 0;
  clear_has_thickness();
}
float SSL_FieldCicularArc::thickness() const {
  // @@protoc_insertion_point(field_get:SSL_FieldCicularArc.thickness)
  return thickness_;
}
void SSL_FieldCicularArc::set_thickness(float value) {
  set_has_thickness();
  thickness_ = value;
  // @@protoc_insertion_point(field_set:SSL_FieldCicularArc.thickness)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SSL_GeometryFieldSize::kFieldLengthFieldNumber;
const int SSL_GeometryFieldSize::kFieldWidthFieldNumber;
const int SSL_GeometryFieldSize::kGoalWidthFieldNumber;
const int SSL_GeometryFieldSize::kGoalDepthFieldNumber;
const int SSL_GeometryFieldSize::kBoundaryWidthFieldNumber;
const int SSL_GeometryFieldSize::kFieldLinesFieldNumber;
const int SSL_GeometryFieldSize::kFieldArcsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SSL_GeometryFieldSize::SSL_GeometryFieldSize()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_messages_5frobocup_5fssl_5fgeometry_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSL_GeometryFieldSize)
}
SSL_GeometryFieldSize::SSL_GeometryFieldSize(const SSL_GeometryFieldSize& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      field_lines_(from.field_lines_),
      field_arcs_(from.field_arcs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&field_length_, &from.field_length_,
    reinterpret_cast<char*>(&boundary_width_) -
    reinterpret_cast<char*>(&field_length_) + sizeof(boundary_width_));
  // @@protoc_insertion_point(copy_constructor:SSL_GeometryFieldSize)
}

void SSL_GeometryFieldSize::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&field_length_, 0, reinterpret_cast<char*>(&boundary_width_) -
    reinterpret_cast<char*>(&field_length_) + sizeof(boundary_width_));
}

SSL_GeometryFieldSize::~SSL_GeometryFieldSize() {
  // @@protoc_insertion_point(destructor:SSL_GeometryFieldSize)
  SharedDtor();
}

void SSL_GeometryFieldSize::SharedDtor() {
}

void SSL_GeometryFieldSize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSL_GeometryFieldSize::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[3].descriptor;
}

const SSL_GeometryFieldSize& SSL_GeometryFieldSize::default_instance() {
  protobuf_InitDefaults_messages_5frobocup_5fssl_5fgeometry_2eproto();
  return *internal_default_instance();
}

SSL_GeometryFieldSize* SSL_GeometryFieldSize::New(::google::protobuf::Arena* arena) const {
  SSL_GeometryFieldSize* n = new SSL_GeometryFieldSize;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SSL_GeometryFieldSize::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_GeometryFieldSize)
  field_lines_.Clear();
  field_arcs_.Clear();
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&field_length_, 0, reinterpret_cast<char*>(&boundary_width_) -
      reinterpret_cast<char*>(&field_length_) + sizeof(boundary_width_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SSL_GeometryFieldSize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSL_GeometryFieldSize)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 field_length = 1;
      case 1: {
        if (tag == 8u) {
          set_has_field_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &field_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 field_width = 2;
      case 2: {
        if (tag == 16u) {
          set_has_field_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &field_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 goal_width = 3;
      case 3: {
        if (tag == 24u) {
          set_has_goal_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goal_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 goal_depth = 4;
      case 4: {
        if (tag == 32u) {
          set_has_goal_depth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goal_depth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 boundary_width = 5;
      case 5: {
        if (tag == 40u) {
          set_has_boundary_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boundary_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SSL_FieldLineSegment field_lines = 6;
      case 6: {
        if (tag == 50u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_field_lines()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .SSL_FieldCicularArc field_arcs = 7;
      case 7: {
        if (tag == 58u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_field_arcs()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSL_GeometryFieldSize)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSL_GeometryFieldSize)
  return false;
#undef DO_
}

void SSL_GeometryFieldSize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSL_GeometryFieldSize)
  // required int32 field_length = 1;
  if (has_field_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->field_length(), output);
  }

  // required int32 field_width = 2;
  if (has_field_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->field_width(), output);
  }

  // required int32 goal_width = 3;
  if (has_goal_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->goal_width(), output);
  }

  // required int32 goal_depth = 4;
  if (has_goal_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->goal_depth(), output);
  }

  // required int32 boundary_width = 5;
  if (has_boundary_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->boundary_width(), output);
  }

  // repeated .SSL_FieldLineSegment field_lines = 6;
  for (unsigned int i = 0, n = this->field_lines_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->field_lines(i), output);
  }

  // repeated .SSL_FieldCicularArc field_arcs = 7;
  for (unsigned int i = 0, n = this->field_arcs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->field_arcs(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSL_GeometryFieldSize)
}

::google::protobuf::uint8* SSL_GeometryFieldSize::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SSL_GeometryFieldSize)
  // required int32 field_length = 1;
  if (has_field_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->field_length(), target);
  }

  // required int32 field_width = 2;
  if (has_field_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->field_width(), target);
  }

  // required int32 goal_width = 3;
  if (has_goal_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->goal_width(), target);
  }

  // required int32 goal_depth = 4;
  if (has_goal_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->goal_depth(), target);
  }

  // required int32 boundary_width = 5;
  if (has_boundary_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->boundary_width(), target);
  }

  // repeated .SSL_FieldLineSegment field_lines = 6;
  for (unsigned int i = 0, n = this->field_lines_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->field_lines(i), false, target);
  }

  // repeated .SSL_FieldCicularArc field_arcs = 7;
  for (unsigned int i = 0, n = this->field_arcs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->field_arcs(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSL_GeometryFieldSize)
  return target;
}

size_t SSL_GeometryFieldSize::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SSL_GeometryFieldSize)
  size_t total_size = 0;

  if (has_field_length()) {
    // required int32 field_length = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->field_length());
  }

  if (has_field_width()) {
    // required int32 field_width = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->field_width());
  }

  if (has_goal_width()) {
    // required int32 goal_width = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->goal_width());
  }

  if (has_goal_depth()) {
    // required int32 goal_depth = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->goal_depth());
  }

  if (has_boundary_width()) {
    // required int32 boundary_width = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->boundary_width());
  }

  return total_size;
}
size_t SSL_GeometryFieldSize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_GeometryFieldSize)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required int32 field_length = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->field_length());

    // required int32 field_width = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->field_width());

    // required int32 goal_width = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->goal_width());

    // required int32 goal_depth = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->goal_depth());

    // required int32 boundary_width = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->boundary_width());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .SSL_FieldLineSegment field_lines = 6;
  {
    unsigned int count = this->field_lines_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->field_lines(i));
    }
  }

  // repeated .SSL_FieldCicularArc field_arcs = 7;
  {
    unsigned int count = this->field_arcs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->field_arcs(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSL_GeometryFieldSize::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SSL_GeometryFieldSize)
  GOOGLE_DCHECK_NE(&from, this);
  const SSL_GeometryFieldSize* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SSL_GeometryFieldSize>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SSL_GeometryFieldSize)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SSL_GeometryFieldSize)
    MergeFrom(*source);
  }
}

void SSL_GeometryFieldSize::MergeFrom(const SSL_GeometryFieldSize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSL_GeometryFieldSize)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  field_lines_.MergeFrom(from.field_lines_);
  field_arcs_.MergeFrom(from.field_arcs_);
  if (from._has_bits_[0 / 32] & 31u) {
    if (from.has_field_length()) {
      set_field_length(from.field_length());
    }
    if (from.has_field_width()) {
      set_field_width(from.field_width());
    }
    if (from.has_goal_width()) {
      set_goal_width(from.goal_width());
    }
    if (from.has_goal_depth()) {
      set_goal_depth(from.goal_depth());
    }
    if (from.has_boundary_width()) {
      set_boundary_width(from.boundary_width());
    }
  }
}

void SSL_GeometryFieldSize::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SSL_GeometryFieldSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSL_GeometryFieldSize::CopyFrom(const SSL_GeometryFieldSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_GeometryFieldSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_GeometryFieldSize::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->field_lines())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->field_arcs())) return false;
  return true;
}

void SSL_GeometryFieldSize::Swap(SSL_GeometryFieldSize* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SSL_GeometryFieldSize::InternalSwap(SSL_GeometryFieldSize* other) {
  field_lines_.UnsafeArenaSwap(&other->field_lines_);
  field_arcs_.UnsafeArenaSwap(&other->field_arcs_);
  std::swap(field_length_, other->field_length_);
  std::swap(field_width_, other->field_width_);
  std::swap(goal_width_, other->goal_width_);
  std::swap(goal_depth_, other->goal_depth_);
  std::swap(boundary_width_, other->boundary_width_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SSL_GeometryFieldSize::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SSL_GeometryFieldSize

// required int32 field_length = 1;
bool SSL_GeometryFieldSize::has_field_length() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SSL_GeometryFieldSize::set_has_field_length() {
  _has_bits_[0] |= 0x00000001u;
}
void SSL_GeometryFieldSize::clear_has_field_length() {
  _has_bits_[0] &= ~0x00000001u;
}
void SSL_GeometryFieldSize::clear_field_length() {
  field_length_ = 0;
  clear_has_field_length();
}
::google::protobuf::int32 SSL_GeometryFieldSize::field_length() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.field_length)
  return field_length_;
}
void SSL_GeometryFieldSize::set_field_length(::google::protobuf::int32 value) {
  set_has_field_length();
  field_length_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.field_length)
}

// required int32 field_width = 2;
bool SSL_GeometryFieldSize::has_field_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SSL_GeometryFieldSize::set_has_field_width() {
  _has_bits_[0] |= 0x00000002u;
}
void SSL_GeometryFieldSize::clear_has_field_width() {
  _has_bits_[0] &= ~0x00000002u;
}
void SSL_GeometryFieldSize::clear_field_width() {
  field_width_ = 0;
  clear_has_field_width();
}
::google::protobuf::int32 SSL_GeometryFieldSize::field_width() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.field_width)
  return field_width_;
}
void SSL_GeometryFieldSize::set_field_width(::google::protobuf::int32 value) {
  set_has_field_width();
  field_width_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.field_width)
}

// required int32 goal_width = 3;
bool SSL_GeometryFieldSize::has_goal_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SSL_GeometryFieldSize::set_has_goal_width() {
  _has_bits_[0] |= 0x00000004u;
}
void SSL_GeometryFieldSize::clear_has_goal_width() {
  _has_bits_[0] &= ~0x00000004u;
}
void SSL_GeometryFieldSize::clear_goal_width() {
  goal_width_ = 0;
  clear_has_goal_width();
}
::google::protobuf::int32 SSL_GeometryFieldSize::goal_width() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.goal_width)
  return goal_width_;
}
void SSL_GeometryFieldSize::set_goal_width(::google::protobuf::int32 value) {
  set_has_goal_width();
  goal_width_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.goal_width)
}

// required int32 goal_depth = 4;
bool SSL_GeometryFieldSize::has_goal_depth() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SSL_GeometryFieldSize::set_has_goal_depth() {
  _has_bits_[0] |= 0x00000008u;
}
void SSL_GeometryFieldSize::clear_has_goal_depth() {
  _has_bits_[0] &= ~0x00000008u;
}
void SSL_GeometryFieldSize::clear_goal_depth() {
  goal_depth_ = 0;
  clear_has_goal_depth();
}
::google::protobuf::int32 SSL_GeometryFieldSize::goal_depth() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.goal_depth)
  return goal_depth_;
}
void SSL_GeometryFieldSize::set_goal_depth(::google::protobuf::int32 value) {
  set_has_goal_depth();
  goal_depth_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.goal_depth)
}

// required int32 boundary_width = 5;
bool SSL_GeometryFieldSize::has_boundary_width() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SSL_GeometryFieldSize::set_has_boundary_width() {
  _has_bits_[0] |= 0x00000010u;
}
void SSL_GeometryFieldSize::clear_has_boundary_width() {
  _has_bits_[0] &= ~0x00000010u;
}
void SSL_GeometryFieldSize::clear_boundary_width() {
  boundary_width_ = 0;
  clear_has_boundary_width();
}
::google::protobuf::int32 SSL_GeometryFieldSize::boundary_width() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.boundary_width)
  return boundary_width_;
}
void SSL_GeometryFieldSize::set_boundary_width(::google::protobuf::int32 value) {
  set_has_boundary_width();
  boundary_width_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.boundary_width)
}

// repeated .SSL_FieldLineSegment field_lines = 6;
int SSL_GeometryFieldSize::field_lines_size() const {
  return field_lines_.size();
}
void SSL_GeometryFieldSize::clear_field_lines() {
  field_lines_.Clear();
}
const ::SSL_FieldLineSegment& SSL_GeometryFieldSize::field_lines(int index) const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.field_lines)
  return field_lines_.Get(index);
}
::SSL_FieldLineSegment* SSL_GeometryFieldSize::mutable_field_lines(int index) {
  // @@protoc_insertion_point(field_mutable:SSL_GeometryFieldSize.field_lines)
  return field_lines_.Mutable(index);
}
::SSL_FieldLineSegment* SSL_GeometryFieldSize::add_field_lines() {
  // @@protoc_insertion_point(field_add:SSL_GeometryFieldSize.field_lines)
  return field_lines_.Add();
}
::google::protobuf::RepeatedPtrField< ::SSL_FieldLineSegment >*
SSL_GeometryFieldSize::mutable_field_lines() {
  // @@protoc_insertion_point(field_mutable_list:SSL_GeometryFieldSize.field_lines)
  return &field_lines_;
}
const ::google::protobuf::RepeatedPtrField< ::SSL_FieldLineSegment >&
SSL_GeometryFieldSize::field_lines() const {
  // @@protoc_insertion_point(field_list:SSL_GeometryFieldSize.field_lines)
  return field_lines_;
}

// repeated .SSL_FieldCicularArc field_arcs = 7;
int SSL_GeometryFieldSize::field_arcs_size() const {
  return field_arcs_.size();
}
void SSL_GeometryFieldSize::clear_field_arcs() {
  field_arcs_.Clear();
}
const ::SSL_FieldCicularArc& SSL_GeometryFieldSize::field_arcs(int index) const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.field_arcs)
  return field_arcs_.Get(index);
}
::SSL_FieldCicularArc* SSL_GeometryFieldSize::mutable_field_arcs(int index) {
  // @@protoc_insertion_point(field_mutable:SSL_GeometryFieldSize.field_arcs)
  return field_arcs_.Mutable(index);
}
::SSL_FieldCicularArc* SSL_GeometryFieldSize::add_field_arcs() {
  // @@protoc_insertion_point(field_add:SSL_GeometryFieldSize.field_arcs)
  return field_arcs_.Add();
}
::google::protobuf::RepeatedPtrField< ::SSL_FieldCicularArc >*
SSL_GeometryFieldSize::mutable_field_arcs() {
  // @@protoc_insertion_point(field_mutable_list:SSL_GeometryFieldSize.field_arcs)
  return &field_arcs_;
}
const ::google::protobuf::RepeatedPtrField< ::SSL_FieldCicularArc >&
SSL_GeometryFieldSize::field_arcs() const {
  // @@protoc_insertion_point(field_list:SSL_GeometryFieldSize.field_arcs)
  return field_arcs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SSL_GeometryCameraCalibration::kCameraIdFieldNumber;
const int SSL_GeometryCameraCalibration::kFocalLengthFieldNumber;
const int SSL_GeometryCameraCalibration::kPrincipalPointXFieldNumber;
const int SSL_GeometryCameraCalibration::kPrincipalPointYFieldNumber;
const int SSL_GeometryCameraCalibration::kDistortionFieldNumber;
const int SSL_GeometryCameraCalibration::kQ0FieldNumber;
const int SSL_GeometryCameraCalibration::kQ1FieldNumber;
const int SSL_GeometryCameraCalibration::kQ2FieldNumber;
const int SSL_GeometryCameraCalibration::kQ3FieldNumber;
const int SSL_GeometryCameraCalibration::kTxFieldNumber;
const int SSL_GeometryCameraCalibration::kTyFieldNumber;
const int SSL_GeometryCameraCalibration::kTzFieldNumber;
const int SSL_GeometryCameraCalibration::kDerivedCameraWorldTxFieldNumber;
const int SSL_GeometryCameraCalibration::kDerivedCameraWorldTyFieldNumber;
const int SSL_GeometryCameraCalibration::kDerivedCameraWorldTzFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SSL_GeometryCameraCalibration::SSL_GeometryCameraCalibration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_messages_5frobocup_5fssl_5fgeometry_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSL_GeometryCameraCalibration)
}
SSL_GeometryCameraCalibration::SSL_GeometryCameraCalibration(const SSL_GeometryCameraCalibration& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&camera_id_, &from.camera_id_,
    reinterpret_cast<char*>(&derived_camera_world_tz_) -
    reinterpret_cast<char*>(&camera_id_) + sizeof(derived_camera_world_tz_));
  // @@protoc_insertion_point(copy_constructor:SSL_GeometryCameraCalibration)
}

void SSL_GeometryCameraCalibration::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&camera_id_, 0, reinterpret_cast<char*>(&derived_camera_world_tz_) -
    reinterpret_cast<char*>(&camera_id_) + sizeof(derived_camera_world_tz_));
}

SSL_GeometryCameraCalibration::~SSL_GeometryCameraCalibration() {
  // @@protoc_insertion_point(destructor:SSL_GeometryCameraCalibration)
  SharedDtor();
}

void SSL_GeometryCameraCalibration::SharedDtor() {
}

void SSL_GeometryCameraCalibration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSL_GeometryCameraCalibration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[4].descriptor;
}

const SSL_GeometryCameraCalibration& SSL_GeometryCameraCalibration::default_instance() {
  protobuf_InitDefaults_messages_5frobocup_5fssl_5fgeometry_2eproto();
  return *internal_default_instance();
}

SSL_GeometryCameraCalibration* SSL_GeometryCameraCalibration::New(::google::protobuf::Arena* arena) const {
  SSL_GeometryCameraCalibration* n = new SSL_GeometryCameraCalibration;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SSL_GeometryCameraCalibration::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_GeometryCameraCalibration)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&camera_id_, 0, reinterpret_cast<char*>(&q2_) -
      reinterpret_cast<char*>(&camera_id_) + sizeof(q2_));
  }
  if (_has_bits_[8 / 32] & 32512u) {
    ::memset(&q3_, 0, reinterpret_cast<char*>(&derived_camera_world_tz_) -
      reinterpret_cast<char*>(&q3_) + sizeof(derived_camera_world_tz_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SSL_GeometryCameraCalibration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSL_GeometryCameraCalibration)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 camera_id = 1;
      case 1: {
        if (tag == 8u) {
          set_has_camera_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &camera_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float focal_length = 2;
      case 2: {
        if (tag == 21u) {
          set_has_focal_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &focal_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float principal_point_x = 3;
      case 3: {
        if (tag == 29u) {
          set_has_principal_point_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &principal_point_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float principal_point_y = 4;
      case 4: {
        if (tag == 37u) {
          set_has_principal_point_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &principal_point_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float distortion = 5;
      case 5: {
        if (tag == 45u) {
          set_has_distortion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distortion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float q0 = 6;
      case 6: {
        if (tag == 53u) {
          set_has_q0();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &q0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float q1 = 7;
      case 7: {
        if (tag == 61u) {
          set_has_q1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &q1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float q2 = 8;
      case 8: {
        if (tag == 69u) {
          set_has_q2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &q2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float q3 = 9;
      case 9: {
        if (tag == 77u) {
          set_has_q3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &q3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float tx = 10;
      case 10: {
        if (tag == 85u) {
          set_has_tx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float ty = 11;
      case 11: {
        if (tag == 93u) {
          set_has_ty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float tz = 12;
      case 12: {
        if (tag == 101u) {
          set_has_tz();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float derived_camera_world_tx = 13;
      case 13: {
        if (tag == 109u) {
          set_has_derived_camera_world_tx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &derived_camera_world_tx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float derived_camera_world_ty = 14;
      case 14: {
        if (tag == 117u) {
          set_has_derived_camera_world_ty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &derived_camera_world_ty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float derived_camera_world_tz = 15;
      case 15: {
        if (tag == 125u) {
          set_has_derived_camera_world_tz();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &derived_camera_world_tz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSL_GeometryCameraCalibration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSL_GeometryCameraCalibration)
  return false;
#undef DO_
}

void SSL_GeometryCameraCalibration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSL_GeometryCameraCalibration)
  // required uint32 camera_id = 1;
  if (has_camera_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->camera_id(), output);
  }

  // required float focal_length = 2;
  if (has_focal_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->focal_length(), output);
  }

  // required float principal_point_x = 3;
  if (has_principal_point_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->principal_point_x(), output);
  }

  // required float principal_point_y = 4;
  if (has_principal_point_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->principal_point_y(), output);
  }

  // required float distortion = 5;
  if (has_distortion()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->distortion(), output);
  }

  // required float q0 = 6;
  if (has_q0()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->q0(), output);
  }

  // required float q1 = 7;
  if (has_q1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->q1(), output);
  }

  // required float q2 = 8;
  if (has_q2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->q2(), output);
  }

  // required float q3 = 9;
  if (has_q3()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->q3(), output);
  }

  // required float tx = 10;
  if (has_tx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->tx(), output);
  }

  // required float ty = 11;
  if (has_ty()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->ty(), output);
  }

  // required float tz = 12;
  if (has_tz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->tz(), output);
  }

  // optional float derived_camera_world_tx = 13;
  if (has_derived_camera_world_tx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->derived_camera_world_tx(), output);
  }

  // optional float derived_camera_world_ty = 14;
  if (has_derived_camera_world_ty()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->derived_camera_world_ty(), output);
  }

  // optional float derived_camera_world_tz = 15;
  if (has_derived_camera_world_tz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->derived_camera_world_tz(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSL_GeometryCameraCalibration)
}

::google::protobuf::uint8* SSL_GeometryCameraCalibration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SSL_GeometryCameraCalibration)
  // required uint32 camera_id = 1;
  if (has_camera_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->camera_id(), target);
  }

  // required float focal_length = 2;
  if (has_focal_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->focal_length(), target);
  }

  // required float principal_point_x = 3;
  if (has_principal_point_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->principal_point_x(), target);
  }

  // required float principal_point_y = 4;
  if (has_principal_point_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->principal_point_y(), target);
  }

  // required float distortion = 5;
  if (has_distortion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->distortion(), target);
  }

  // required float q0 = 6;
  if (has_q0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->q0(), target);
  }

  // required float q1 = 7;
  if (has_q1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->q1(), target);
  }

  // required float q2 = 8;
  if (has_q2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->q2(), target);
  }

  // required float q3 = 9;
  if (has_q3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->q3(), target);
  }

  // required float tx = 10;
  if (has_tx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->tx(), target);
  }

  // required float ty = 11;
  if (has_ty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->ty(), target);
  }

  // required float tz = 12;
  if (has_tz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->tz(), target);
  }

  // optional float derived_camera_world_tx = 13;
  if (has_derived_camera_world_tx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->derived_camera_world_tx(), target);
  }

  // optional float derived_camera_world_ty = 14;
  if (has_derived_camera_world_ty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->derived_camera_world_ty(), target);
  }

  // optional float derived_camera_world_tz = 15;
  if (has_derived_camera_world_tz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->derived_camera_world_tz(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSL_GeometryCameraCalibration)
  return target;
}

size_t SSL_GeometryCameraCalibration::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SSL_GeometryCameraCalibration)
  size_t total_size = 0;

  if (has_camera_id()) {
    // required uint32 camera_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->camera_id());
  }

  if (has_focal_length()) {
    // required float focal_length = 2;
    total_size += 1 + 4;
  }

  if (has_principal_point_x()) {
    // required float principal_point_x = 3;
    total_size += 1 + 4;
  }

  if (has_principal_point_y()) {
    // required float principal_point_y = 4;
    total_size += 1 + 4;
  }

  if (has_distortion()) {
    // required float distortion = 5;
    total_size += 1 + 4;
  }

  if (has_q0()) {
    // required float q0 = 6;
    total_size += 1 + 4;
  }

  if (has_q1()) {
    // required float q1 = 7;
    total_size += 1 + 4;
  }

  if (has_q2()) {
    // required float q2 = 8;
    total_size += 1 + 4;
  }

  if (has_q3()) {
    // required float q3 = 9;
    total_size += 1 + 4;
  }

  if (has_tx()) {
    // required float tx = 10;
    total_size += 1 + 4;
  }

  if (has_ty()) {
    // required float ty = 11;
    total_size += 1 + 4;
  }

  if (has_tz()) {
    // required float tz = 12;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t SSL_GeometryCameraCalibration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_GeometryCameraCalibration)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000fff) ^ 0x00000fff) == 0) {  // All required fields are present.
    // required uint32 camera_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->camera_id());

    // required float focal_length = 2;
    total_size += 1 + 4;

    // required float principal_point_x = 3;
    total_size += 1 + 4;

    // required float principal_point_y = 4;
    total_size += 1 + 4;

    // required float distortion = 5;
    total_size += 1 + 4;

    // required float q0 = 6;
    total_size += 1 + 4;

    // required float q1 = 7;
    total_size += 1 + 4;

    // required float q2 = 8;
    total_size += 1 + 4;

    // required float q3 = 9;
    total_size += 1 + 4;

    // required float tx = 10;
    total_size += 1 + 4;

    // required float ty = 11;
    total_size += 1 + 4;

    // required float tz = 12;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[8 / 32] & 28672u) {
    // optional float derived_camera_world_tx = 13;
    if (has_derived_camera_world_tx()) {
      total_size += 1 + 4;
    }

    // optional float derived_camera_world_ty = 14;
    if (has_derived_camera_world_ty()) {
      total_size += 1 + 4;
    }

    // optional float derived_camera_world_tz = 15;
    if (has_derived_camera_world_tz()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSL_GeometryCameraCalibration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SSL_GeometryCameraCalibration)
  GOOGLE_DCHECK_NE(&from, this);
  const SSL_GeometryCameraCalibration* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SSL_GeometryCameraCalibration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SSL_GeometryCameraCalibration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SSL_GeometryCameraCalibration)
    MergeFrom(*source);
  }
}

void SSL_GeometryCameraCalibration::MergeFrom(const SSL_GeometryCameraCalibration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSL_GeometryCameraCalibration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_camera_id()) {
      set_camera_id(from.camera_id());
    }
    if (from.has_focal_length()) {
      set_focal_length(from.focal_length());
    }
    if (from.has_principal_point_x()) {
      set_principal_point_x(from.principal_point_x());
    }
    if (from.has_principal_point_y()) {
      set_principal_point_y(from.principal_point_y());
    }
    if (from.has_distortion()) {
      set_distortion(from.distortion());
    }
    if (from.has_q0()) {
      set_q0(from.q0());
    }
    if (from.has_q1()) {
      set_q1(from.q1());
    }
    if (from.has_q2()) {
      set_q2(from.q2());
    }
  }
  if (from._has_bits_[8 / 32] & 32512u) {
    if (from.has_q3()) {
      set_q3(from.q3());
    }
    if (from.has_tx()) {
      set_tx(from.tx());
    }
    if (from.has_ty()) {
      set_ty(from.ty());
    }
    if (from.has_tz()) {
      set_tz(from.tz());
    }
    if (from.has_derived_camera_world_tx()) {
      set_derived_camera_world_tx(from.derived_camera_world_tx());
    }
    if (from.has_derived_camera_world_ty()) {
      set_derived_camera_world_ty(from.derived_camera_world_ty());
    }
    if (from.has_derived_camera_world_tz()) {
      set_derived_camera_world_tz(from.derived_camera_world_tz());
    }
  }
}

void SSL_GeometryCameraCalibration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SSL_GeometryCameraCalibration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSL_GeometryCameraCalibration::CopyFrom(const SSL_GeometryCameraCalibration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_GeometryCameraCalibration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_GeometryCameraCalibration::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;
  return true;
}

void SSL_GeometryCameraCalibration::Swap(SSL_GeometryCameraCalibration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SSL_GeometryCameraCalibration::InternalSwap(SSL_GeometryCameraCalibration* other) {
  std::swap(camera_id_, other->camera_id_);
  std::swap(focal_length_, other->focal_length_);
  std::swap(principal_point_x_, other->principal_point_x_);
  std::swap(principal_point_y_, other->principal_point_y_);
  std::swap(distortion_, other->distortion_);
  std::swap(q0_, other->q0_);
  std::swap(q1_, other->q1_);
  std::swap(q2_, other->q2_);
  std::swap(q3_, other->q3_);
  std::swap(tx_, other->tx_);
  std::swap(ty_, other->ty_);
  std::swap(tz_, other->tz_);
  std::swap(derived_camera_world_tx_, other->derived_camera_world_tx_);
  std::swap(derived_camera_world_ty_, other->derived_camera_world_ty_);
  std::swap(derived_camera_world_tz_, other->derived_camera_world_tz_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SSL_GeometryCameraCalibration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SSL_GeometryCameraCalibration

// required uint32 camera_id = 1;
bool SSL_GeometryCameraCalibration::has_camera_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SSL_GeometryCameraCalibration::set_has_camera_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SSL_GeometryCameraCalibration::clear_has_camera_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SSL_GeometryCameraCalibration::clear_camera_id() {
  camera_id_ = 0u;
  clear_has_camera_id();
}
::google::protobuf::uint32 SSL_GeometryCameraCalibration::camera_id() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.camera_id)
  return camera_id_;
}
void SSL_GeometryCameraCalibration::set_camera_id(::google::protobuf::uint32 value) {
  set_has_camera_id();
  camera_id_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.camera_id)
}

// required float focal_length = 2;
bool SSL_GeometryCameraCalibration::has_focal_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SSL_GeometryCameraCalibration::set_has_focal_length() {
  _has_bits_[0] |= 0x00000002u;
}
void SSL_GeometryCameraCalibration::clear_has_focal_length() {
  _has_bits_[0] &= ~0x00000002u;
}
void SSL_GeometryCameraCalibration::clear_focal_length() {
  focal_length_ = 0;
  clear_has_focal_length();
}
float SSL_GeometryCameraCalibration::focal_length() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.focal_length)
  return focal_length_;
}
void SSL_GeometryCameraCalibration::set_focal_length(float value) {
  set_has_focal_length();
  focal_length_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.focal_length)
}

// required float principal_point_x = 3;
bool SSL_GeometryCameraCalibration::has_principal_point_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SSL_GeometryCameraCalibration::set_has_principal_point_x() {
  _has_bits_[0] |= 0x00000004u;
}
void SSL_GeometryCameraCalibration::clear_has_principal_point_x() {
  _has_bits_[0] &= ~0x00000004u;
}
void SSL_GeometryCameraCalibration::clear_principal_point_x() {
  principal_point_x_ = 0;
  clear_has_principal_point_x();
}
float SSL_GeometryCameraCalibration::principal_point_x() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.principal_point_x)
  return principal_point_x_;
}
void SSL_GeometryCameraCalibration::set_principal_point_x(float value) {
  set_has_principal_point_x();
  principal_point_x_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.principal_point_x)
}

// required float principal_point_y = 4;
bool SSL_GeometryCameraCalibration::has_principal_point_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SSL_GeometryCameraCalibration::set_has_principal_point_y() {
  _has_bits_[0] |= 0x00000008u;
}
void SSL_GeometryCameraCalibration::clear_has_principal_point_y() {
  _has_bits_[0] &= ~0x00000008u;
}
void SSL_GeometryCameraCalibration::clear_principal_point_y() {
  principal_point_y_ = 0;
  clear_has_principal_point_y();
}
float SSL_GeometryCameraCalibration::principal_point_y() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.principal_point_y)
  return principal_point_y_;
}
void SSL_GeometryCameraCalibration::set_principal_point_y(float value) {
  set_has_principal_point_y();
  principal_point_y_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.principal_point_y)
}

// required float distortion = 5;
bool SSL_GeometryCameraCalibration::has_distortion() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SSL_GeometryCameraCalibration::set_has_distortion() {
  _has_bits_[0] |= 0x00000010u;
}
void SSL_GeometryCameraCalibration::clear_has_distortion() {
  _has_bits_[0] &= ~0x00000010u;
}
void SSL_GeometryCameraCalibration::clear_distortion() {
  distortion_ = 0;
  clear_has_distortion();
}
float SSL_GeometryCameraCalibration::distortion() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.distortion)
  return distortion_;
}
void SSL_GeometryCameraCalibration::set_distortion(float value) {
  set_has_distortion();
  distortion_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.distortion)
}

// required float q0 = 6;
bool SSL_GeometryCameraCalibration::has_q0() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SSL_GeometryCameraCalibration::set_has_q0() {
  _has_bits_[0] |= 0x00000020u;
}
void SSL_GeometryCameraCalibration::clear_has_q0() {
  _has_bits_[0] &= ~0x00000020u;
}
void SSL_GeometryCameraCalibration::clear_q0() {
  q0_ = 0;
  clear_has_q0();
}
float SSL_GeometryCameraCalibration::q0() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.q0)
  return q0_;
}
void SSL_GeometryCameraCalibration::set_q0(float value) {
  set_has_q0();
  q0_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.q0)
}

// required float q1 = 7;
bool SSL_GeometryCameraCalibration::has_q1() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SSL_GeometryCameraCalibration::set_has_q1() {
  _has_bits_[0] |= 0x00000040u;
}
void SSL_GeometryCameraCalibration::clear_has_q1() {
  _has_bits_[0] &= ~0x00000040u;
}
void SSL_GeometryCameraCalibration::clear_q1() {
  q1_ = 0;
  clear_has_q1();
}
float SSL_GeometryCameraCalibration::q1() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.q1)
  return q1_;
}
void SSL_GeometryCameraCalibration::set_q1(float value) {
  set_has_q1();
  q1_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.q1)
}

// required float q2 = 8;
bool SSL_GeometryCameraCalibration::has_q2() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SSL_GeometryCameraCalibration::set_has_q2() {
  _has_bits_[0] |= 0x00000080u;
}
void SSL_GeometryCameraCalibration::clear_has_q2() {
  _has_bits_[0] &= ~0x00000080u;
}
void SSL_GeometryCameraCalibration::clear_q2() {
  q2_ = 0;
  clear_has_q2();
}
float SSL_GeometryCameraCalibration::q2() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.q2)
  return q2_;
}
void SSL_GeometryCameraCalibration::set_q2(float value) {
  set_has_q2();
  q2_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.q2)
}

// required float q3 = 9;
bool SSL_GeometryCameraCalibration::has_q3() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SSL_GeometryCameraCalibration::set_has_q3() {
  _has_bits_[0] |= 0x00000100u;
}
void SSL_GeometryCameraCalibration::clear_has_q3() {
  _has_bits_[0] &= ~0x00000100u;
}
void SSL_GeometryCameraCalibration::clear_q3() {
  q3_ = 0;
  clear_has_q3();
}
float SSL_GeometryCameraCalibration::q3() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.q3)
  return q3_;
}
void SSL_GeometryCameraCalibration::set_q3(float value) {
  set_has_q3();
  q3_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.q3)
}

// required float tx = 10;
bool SSL_GeometryCameraCalibration::has_tx() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SSL_GeometryCameraCalibration::set_has_tx() {
  _has_bits_[0] |= 0x00000200u;
}
void SSL_GeometryCameraCalibration::clear_has_tx() {
  _has_bits_[0] &= ~0x00000200u;
}
void SSL_GeometryCameraCalibration::clear_tx() {
  tx_ = 0;
  clear_has_tx();
}
float SSL_GeometryCameraCalibration::tx() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.tx)
  return tx_;
}
void SSL_GeometryCameraCalibration::set_tx(float value) {
  set_has_tx();
  tx_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.tx)
}

// required float ty = 11;
bool SSL_GeometryCameraCalibration::has_ty() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void SSL_GeometryCameraCalibration::set_has_ty() {
  _has_bits_[0] |= 0x00000400u;
}
void SSL_GeometryCameraCalibration::clear_has_ty() {
  _has_bits_[0] &= ~0x00000400u;
}
void SSL_GeometryCameraCalibration::clear_ty() {
  ty_ = 0;
  clear_has_ty();
}
float SSL_GeometryCameraCalibration::ty() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.ty)
  return ty_;
}
void SSL_GeometryCameraCalibration::set_ty(float value) {
  set_has_ty();
  ty_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.ty)
}

// required float tz = 12;
bool SSL_GeometryCameraCalibration::has_tz() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void SSL_GeometryCameraCalibration::set_has_tz() {
  _has_bits_[0] |= 0x00000800u;
}
void SSL_GeometryCameraCalibration::clear_has_tz() {
  _has_bits_[0] &= ~0x00000800u;
}
void SSL_GeometryCameraCalibration::clear_tz() {
  tz_ = 0;
  clear_has_tz();
}
float SSL_GeometryCameraCalibration::tz() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.tz)
  return tz_;
}
void SSL_GeometryCameraCalibration::set_tz(float value) {
  set_has_tz();
  tz_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.tz)
}

// optional float derived_camera_world_tx = 13;
bool SSL_GeometryCameraCalibration::has_derived_camera_world_tx() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void SSL_GeometryCameraCalibration::set_has_derived_camera_world_tx() {
  _has_bits_[0] |= 0x00001000u;
}
void SSL_GeometryCameraCalibration::clear_has_derived_camera_world_tx() {
  _has_bits_[0] &= ~0x00001000u;
}
void SSL_GeometryCameraCalibration::clear_derived_camera_world_tx() {
  derived_camera_world_tx_ = 0;
  clear_has_derived_camera_world_tx();
}
float SSL_GeometryCameraCalibration::derived_camera_world_tx() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.derived_camera_world_tx)
  return derived_camera_world_tx_;
}
void SSL_GeometryCameraCalibration::set_derived_camera_world_tx(float value) {
  set_has_derived_camera_world_tx();
  derived_camera_world_tx_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.derived_camera_world_tx)
}

// optional float derived_camera_world_ty = 14;
bool SSL_GeometryCameraCalibration::has_derived_camera_world_ty() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void SSL_GeometryCameraCalibration::set_has_derived_camera_world_ty() {
  _has_bits_[0] |= 0x00002000u;
}
void SSL_GeometryCameraCalibration::clear_has_derived_camera_world_ty() {
  _has_bits_[0] &= ~0x00002000u;
}
void SSL_GeometryCameraCalibration::clear_derived_camera_world_ty() {
  derived_camera_world_ty_ = 0;
  clear_has_derived_camera_world_ty();
}
float SSL_GeometryCameraCalibration::derived_camera_world_ty() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.derived_camera_world_ty)
  return derived_camera_world_ty_;
}
void SSL_GeometryCameraCalibration::set_derived_camera_world_ty(float value) {
  set_has_derived_camera_world_ty();
  derived_camera_world_ty_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.derived_camera_world_ty)
}

// optional float derived_camera_world_tz = 15;
bool SSL_GeometryCameraCalibration::has_derived_camera_world_tz() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void SSL_GeometryCameraCalibration::set_has_derived_camera_world_tz() {
  _has_bits_[0] |= 0x00004000u;
}
void SSL_GeometryCameraCalibration::clear_has_derived_camera_world_tz() {
  _has_bits_[0] &= ~0x00004000u;
}
void SSL_GeometryCameraCalibration::clear_derived_camera_world_tz() {
  derived_camera_world_tz_ = 0;
  clear_has_derived_camera_world_tz();
}
float SSL_GeometryCameraCalibration::derived_camera_world_tz() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.derived_camera_world_tz)
  return derived_camera_world_tz_;
}
void SSL_GeometryCameraCalibration::set_derived_camera_world_tz(float value) {
  set_has_derived_camera_world_tz();
  derived_camera_world_tz_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.derived_camera_world_tz)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SSL_GeometryData::kFieldFieldNumber;
const int SSL_GeometryData::kCalibFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SSL_GeometryData::SSL_GeometryData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_messages_5frobocup_5fssl_5fgeometry_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSL_GeometryData)
}
SSL_GeometryData::SSL_GeometryData(const SSL_GeometryData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      calib_(from.calib_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_field()) {
    field_ = new ::SSL_GeometryFieldSize(*from.field_);
  } else {
    field_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:SSL_GeometryData)
}

void SSL_GeometryData::SharedCtor() {
  _cached_size_ = 0;
  field_ = NULL;
}

SSL_GeometryData::~SSL_GeometryData() {
  // @@protoc_insertion_point(destructor:SSL_GeometryData)
  SharedDtor();
}

void SSL_GeometryData::SharedDtor() {
  if (this != internal_default_instance()) {
    delete field_;
  }
}

void SSL_GeometryData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSL_GeometryData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[5].descriptor;
}

const SSL_GeometryData& SSL_GeometryData::default_instance() {
  protobuf_InitDefaults_messages_5frobocup_5fssl_5fgeometry_2eproto();
  return *internal_default_instance();
}

SSL_GeometryData* SSL_GeometryData::New(::google::protobuf::Arena* arena) const {
  SSL_GeometryData* n = new SSL_GeometryData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SSL_GeometryData::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_GeometryData)
  calib_.Clear();
  if (has_field()) {
    GOOGLE_DCHECK(field_ != NULL);
    field_->::SSL_GeometryFieldSize::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SSL_GeometryData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSL_GeometryData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SSL_GeometryFieldSize field = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SSL_GeometryCameraCalibration calib = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_calib()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSL_GeometryData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSL_GeometryData)
  return false;
#undef DO_
}

void SSL_GeometryData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSL_GeometryData)
  // required .SSL_GeometryFieldSize field = 1;
  if (has_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->field_, output);
  }

  // repeated .SSL_GeometryCameraCalibration calib = 2;
  for (unsigned int i = 0, n = this->calib_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->calib(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSL_GeometryData)
}

::google::protobuf::uint8* SSL_GeometryData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SSL_GeometryData)
  // required .SSL_GeometryFieldSize field = 1;
  if (has_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->field_, false, target);
  }

  // repeated .SSL_GeometryCameraCalibration calib = 2;
  for (unsigned int i = 0, n = this->calib_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->calib(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSL_GeometryData)
  return target;
}

size_t SSL_GeometryData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_GeometryData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .SSL_GeometryFieldSize field = 1;
  if (has_field()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->field_);
  }
  // repeated .SSL_GeometryCameraCalibration calib = 2;
  {
    unsigned int count = this->calib_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->calib(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSL_GeometryData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SSL_GeometryData)
  GOOGLE_DCHECK_NE(&from, this);
  const SSL_GeometryData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SSL_GeometryData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SSL_GeometryData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SSL_GeometryData)
    MergeFrom(*source);
  }
}

void SSL_GeometryData::MergeFrom(const SSL_GeometryData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSL_GeometryData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  calib_.MergeFrom(from.calib_);
  if (from.has_field()) {
    mutable_field()->::SSL_GeometryFieldSize::MergeFrom(from.field());
  }
}

void SSL_GeometryData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SSL_GeometryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSL_GeometryData::CopyFrom(const SSL_GeometryData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_GeometryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_GeometryData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->calib())) return false;
  if (has_field()) {
    if (!this->field_->IsInitialized()) return false;
  }
  return true;
}

void SSL_GeometryData::Swap(SSL_GeometryData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SSL_GeometryData::InternalSwap(SSL_GeometryData* other) {
  calib_.UnsafeArenaSwap(&other->calib_);
  std::swap(field_, other->field_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SSL_GeometryData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SSL_GeometryData

// required .SSL_GeometryFieldSize field = 1;
bool SSL_GeometryData::has_field() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SSL_GeometryData::set_has_field() {
  _has_bits_[0] |= 0x00000001u;
}
void SSL_GeometryData::clear_has_field() {
  _has_bits_[0] &= ~0x00000001u;
}
void SSL_GeometryData::clear_field() {
  if (field_ != NULL) field_->::SSL_GeometryFieldSize::Clear();
  clear_has_field();
}
const ::SSL_GeometryFieldSize& SSL_GeometryData::field() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryData.field)
  return field_ != NULL ? *field_
                         : *::SSL_GeometryFieldSize::internal_default_instance();
}
::SSL_GeometryFieldSize* SSL_GeometryData::mutable_field() {
  set_has_field();
  if (field_ == NULL) {
    field_ = new ::SSL_GeometryFieldSize;
  }
  // @@protoc_insertion_point(field_mutable:SSL_GeometryData.field)
  return field_;
}
::SSL_GeometryFieldSize* SSL_GeometryData::release_field() {
  // @@protoc_insertion_point(field_release:SSL_GeometryData.field)
  clear_has_field();
  ::SSL_GeometryFieldSize* temp = field_;
  field_ = NULL;
  return temp;
}
void SSL_GeometryData::set_allocated_field(::SSL_GeometryFieldSize* field) {
  delete field_;
  field_ = field;
  if (field) {
    set_has_field();
  } else {
    clear_has_field();
  }
  // @@protoc_insertion_point(field_set_allocated:SSL_GeometryData.field)
}

// repeated .SSL_GeometryCameraCalibration calib = 2;
int SSL_GeometryData::calib_size() const {
  return calib_.size();
}
void SSL_GeometryData::clear_calib() {
  calib_.Clear();
}
const ::SSL_GeometryCameraCalibration& SSL_GeometryData::calib(int index) const {
  // @@protoc_insertion_point(field_get:SSL_GeometryData.calib)
  return calib_.Get(index);
}
::SSL_GeometryCameraCalibration* SSL_GeometryData::mutable_calib(int index) {
  // @@protoc_insertion_point(field_mutable:SSL_GeometryData.calib)
  return calib_.Mutable(index);
}
::SSL_GeometryCameraCalibration* SSL_GeometryData::add_calib() {
  // @@protoc_insertion_point(field_add:SSL_GeometryData.calib)
  return calib_.Add();
}
::google::protobuf::RepeatedPtrField< ::SSL_GeometryCameraCalibration >*
SSL_GeometryData::mutable_calib() {
  // @@protoc_insertion_point(field_mutable_list:SSL_GeometryData.calib)
  return &calib_;
}
const ::google::protobuf::RepeatedPtrField< ::SSL_GeometryCameraCalibration >&
SSL_GeometryData::calib() const {
  // @@protoc_insertion_point(field_list:SSL_GeometryData.calib)
  return calib_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
